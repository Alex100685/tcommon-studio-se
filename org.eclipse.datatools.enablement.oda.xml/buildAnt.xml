<?xml version="1.0"?>
<!--
 *************************************************************************
 * Copyright (c) 2004, 2006 Actuate Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Actuate Corporation - initial API and implementation
 *  
 *************************************************************************
 *
 *  buildAnt.xml
 *
 *  Build script for project org.eclipse.datatools.connectivity.oda.flatfile
 *
 *  Usage:
 *    ant [any one or more of the public targets] 
 *        -Declipse.home=<your eclipse home> 
 *		  -Ddtp.home=<your DTP plugins source home>  [optional]
 *
 *  Default target is "build.jars".
 *
 *  Notes:
 *  1. classpath need to be set for junit.jar
 *  2. The build script requires Ant 1.6
 *
-->

<project name="DTP ODA XML Project" default="build.jars" basedir=".">
	<description>DTP ODA XML Driver</description>
	<!-- ===== Default value for public properties ============= -->
	<property file="build.properties"/>
	<property name="module.name" value="org.eclipse.datatools.enablement.oda.xml"/>
	<property file="META-INF/MANIFEST.MF" />
	<property name="plugin.version" value="${Bundle-Version}" />
	<property name="plugin.package" value="${module.name}_${plugin.version}" />

	<property name="eclipse.home" location="."/>
	<property name="dtp.home" location=".."/>
	<property name="xerces.dir" location=".."/>
	<property name="utest.report.dir" location="utestreports"/>
	<property name="javadoc.dir" location="doc/api"/>
	<property name="export.dir" location="export"/>
	<property name="dir.utest" value="utest"/>
	<property name="dir.src" value="${source..}"/>
	<property name="dir.test" value="test"/>
	<property name="dir.bin" value="${output..}"/>
	<property name="dir.lib" value="lib"/>
	<property name="build.result.dir" location="."/>
	<property name="source.root" location="./src"/>
	<property name="source.xml.dir" location="./src/org/eclipse/datatools/enablement/oda/xml/"/>
	<property name="temp.dir" location="./tempdir/"/>

	<property name="dtp.oda.plugin" value="org.eclipse.datatools.connectivity.oda" />
	<property name="dtp.oda.dir" location="${dtp.home}/${dtp.oda.plugin}"/>

	<path id="class.path">
		<pathelement path="${dir.bin}"/>
		<pathelement path="${dir.lib}"/>
		<fileset dir="${xerces.dir}">
			<include name="resolver.jar"/>
			<include name="xercesImpl.jar"/>
			<include name="xml-apis.jar"/>
		</fileset>
		<fileset dir="${dtp.oda.dir}">
			<include name="oda.jar"/>
			<include name="download/${dtp.oda.plugin}_*.jar"/>			
		</fileset>
		<!-- Dependencies on Eclipse installation -->
		<fileset dir="${eclipse.home}/plugins">
			<include name="org.eclipse.core.runtime*.jar"/>
			<include name="org.eclipse.osgi*.jar"/>
			<include name="com.ibm.icu_*.jar"/>
		</fileset>
	</path>

	<!-- Compile source code and generate jar for this project.
		 Input parameters:
		 	eclipse.home
		 	dtp.home
	-->
	<target name="oda-xml.jar" depends="compileSource">
		<jar destfile="oda-xml.jar">
			<fileset dir="${dir.bin}">
				<include name="**/*.class"/>
				<include name="**/*.txt"/>
				<include name="**/*.xml"/>
				<include name="**/*.def"/>
				<include name="**/*.properties"/>
			</fileset>
			<zipfileset src="${dtp.oda.dir}/oda.jar" excludes="**/*.MF"/>
		</jar>
	</target>

	<target name="oda-xmlsrc.zip">
		<mkdir dir="${build.result.dir}"/>
		<zip zipfile="${build.result.dir}/oda-flatfilesrc.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="${source.root}" excludes="**/*.class"/>
		</zip>
	</target>

	<target name="build.jars" description="Build all the jars for the plug-in.">
		<antcall target="oda-xml.jar"/>
	</target>

	<target name="build.source.zips" description="Create zip files containing the source for the plug-in.">
		<antcall target="oda-xmlsrc.zip"/>
	</target>

	<target name="gather.bin.parts" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${plugin.package}"/>
		<copy todir="${destination.temp.folder}/${plugin.package}" failonerror="true">
			<fileset dir="${build.result.dir}" includes="${bin.includes}"/>
		</copy>
	</target>

	<target name="gather.src.parts" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${plugin.package}"/>
		<copy todir="${destination.temp.folder}/${plugin.package}" failonerror="false" overwrite="false">
			<fileset dir="${build.result.dir}" includes="oda-flatfilesrc.zip"/>
		</copy>
	</target>

	<target name="zip.plugin" description="Create a zip containing the plug-in.">
		<delete dir="${temp.dir}"/>
		<mkdir dir="${temp.dir}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.dir}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.dir}" includes="**/*.bin.log"/>
		</delete>
		<zip zipfile="${build.result.dir}/${plugin.package}.zip" 
			 basedir="${temp.dir}" 
			 filesonly="true" 
			 whenempty="skip" 
			 update="false"/>
		<delete dir="${temp.dir}"/>
	</target>

	<target name="download.plugin" description="Create a download folder that contains all the files to include in DTP download build.">
		<antcall target="clean"/>
		<antcall target="create.download.dir"/>
		<antcall target="build.jars"/>
		<antcall target="jar.plugin"/>
	</target>

	<target name="jar.plugin" >
		<property file="META-INF/MANIFEST.MF" />
		<property name="jar.name" value="${plugin.package}.jar" />
		<antcall target="create.download.dir"/>
		<jar destfile="${download.dir}/${jar.name}" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${dir.bin}">
				<include name="**/*.class"/>
				<include name="**/*.txt"/>
				<include name="**/*.xml"/>
				<include name="**/*.def"/>
				<include name="**/*.properties"/>
				<exclude name="**/*Test.class"/>
			</fileset>
			<fileset dir="." includes="${bin.includes}"/>
	    </jar>
	</target>

	<target name="create.download.dir" unless="dtp.build">
		<mkdir dir="${download.dir}"/>
	</target>

	<!-- Clean all objects created by this script -->
	<target name="clean" description="Clean the plug-in of all the zips, jars, and logs created.">
		<!-- Delete the generated L10N messages properties -->
		<delete>
			<fileset dir="${source.xml.dir}/i18n" includes="messages_*.properties"/>
			<fileset dir="${build.result.dir}" includes="plugin_*.properties"/>
		</delete>
		<!-- Delete the binary and unit tests directories -->
		<delete dir="${dir.bin}"/>
		<delete dir="${dir.utest}"/>
		<delete dir="${utest.report.dir}"/>
		<delete dir="${javadoc.dir}"/>
		<antcall target="clean.download.dir"/>
		<!-- Delete the target jar and zip files -->
		<delete failonerror="false" file="${build.result.dir}/oda-xml.jar"/>
		<delete failonerror="false" file="${build.result.dir}/oda-xmlsrc.zip"/>
		<delete>
			<fileset dir="${build.result.dir}" includes="${module.name}_*.zip"/>
		</delete>
	</target>

	<target name="clean.download.dir" unless="dtp.build">
		<delete failonerror="false" dir="${download.dir}"/>
	</target>

	<!-- Generate the JavaDoc.
		 Parameters:
		 		- ${javadoc.dir} target directory to put the java document
	 -->
	<target name="javadoc" description="Create Javadoc API documentation for this plugin.">
		<delete dir="${javadoc.dir}"/>
		<mkdir dir="${javadoc.dir}"/>
		<javadoc destdir="${javadoc.dir}" 
				 author="true" 
				 version="true" 
				 use="true" 
				 windowtitle="ODA XML API" 
				 source="1.4"
				 packagenames="${module.name}.*">
			<packageset dir="${dir.src}" defaultexcludes="yes"/>
			<bottom><![CDATA[<i>Copyright &#169;  2005 Actuate Corp. All rights reserved. </i>]]></bottom>
			<classpath refid="class.path"/>
		</javadoc>
	</target>

	<target name="buildDependency">
		<echo message="Begin call ODA jars task in ${dtp.oda.dir}"/>
		<ant dir="${dtp.oda.dir}" antfile="buildAnt.xml" target="build.jars" inheritAll="false">
			<property name="eclipse.home" value="${eclipse.home}"/>
			<property name="dtp.home" value="${dtp.home}"/>
		</ant>
		<echo message="End call ODA jars task in ${dtp.oda.dir}"/>
	</target>

	<target name="compileSource" depends="buildDependency">
		<mkdir dir="${dir.bin}"/>
		<copy todir="${dir.bin}">
			<fileset dir="${dir.src}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>
		<!-- Compile the java code from ${dir.src} into ${dir.bin} -->
		<javac srcdir="${dir.src}" 
			   destdir="${dir.bin}" 
			   encoding="utf-8" 
			   source="1.4" 
			   debug="true">
			
			<classpath refid="class.path"/>
		</javac>
	</target>

	<target name="i18n">
		<native2ascii encoding="Cp1252"
					  src="${source.xml.dir}/i18n" 
					  dest="${source.xml.dir}/i18n" 
					  ext=".properties" 
					  includes="messages_de_DE.msg, messages_es_ES.msg, messages_fr_FR.msg"/>
		<native2ascii encoding="GBK" 
					  src="${source.xml.dir}/i18n" 
					  dest="${source.xml.dir}/i18n" 
					  ext=".properties" 
					  includes="messages_zh_CN.msg"/>	
		<native2ascii encoding="SJIS" 
					  src="${source.xml.dir}/i18n" 
					  dest="${source.xml.dir}/i18n" 
					  ext=".properties"
					  includes="messages_ja_JP.msg"/>
		<native2ascii encoding="MS949" 
					  src="${source.xml.dir}/i18n" 
					  dest="${source.xml.dir}/i18n" 
					  ext=".properties"
					  includes="messages_ko_KR.msg"/>

		<native2ascii encoding="Cp1252"
					  src="${source.xml.dir}/i18n" 
					  dest="${build.result.dir}" 
					  ext=".properties" 
					  includes="plugin_de_DE.msg, plugin_es_ES.msg, plugin_fr_FR.msg"/>
		<native2ascii encoding="GBK" 
					  src="${source.xml.dir}/i18n" 
					  dest="${build.result.dir}" 
					  ext=".properties" 
					  includes="plugin_zh_CN.msg"/>	
		<native2ascii encoding="SJIS" 
					  src="${source.xml.dir}/i18n" 
					  dest="${build.result.dir}" 
					  ext=".properties"
					  includes="plugin_ja_JP.msg"/>
		<native2ascii encoding="MS949" 
					  src="${source.xml.dir}/i18n" 
					  dest="${build.result.dir}" 
					  ext=".properties"
					  includes="plugin_ko_KR.msg"/>
	</target>

	<!-- Run unit tests.
			 Parameters:
			 	- ${utest.report.dir} target directory for the junit test output
	-->
	<!-- This public task does not explicitly depend on compileSource; 
		top level script should call build.jars target before calling run.tests -->
	<target name="run.tests" depends="compileTest" description="Run all the unit tests">
		<!-- run all tests in ${dir.utest} directory -->
		<delete dir="${dir.utest}"/>
		<mkdir dir="${dir.utest}"/>
		<!-- Create the unit tests output directory -->
		<delete dir="${utest.report.dir}"/>
		<mkdir dir="${utest.report.dir}"/>
		<!-- run junit for each testcase -->
		<junit fork="yes" dir="${dir.utest}" taskname="ODA-flatfile Tests">
			<jvmarg value="-ea"/>
			<classpath refid="class.path"/>
			<formatter type="xml"/>
			<batchtest todir="${utest.report.dir}">
				<fileset dir="${dir.test}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- delete the ${dir.utest} dir /-->
		<delete dir="${dir.utest}"/>
	</target>

	<!-- Compile Test Files -->
	<!--  NOTE: must first manually set classpath for junit.jar -->
	<target name="compileTest">
		<mkdir dir="${dir.bin}"/>
		<javac srcdir="${dir.test}"
			   destdir="${dir.bin}" 
			   encoding="utf-8" 
			   source="1.4" 
			   failonerror="true"
			   debug="true">
			<classpath refid="class.path"/>
		</javac>
	</target>
</project>
