<%@ jet 
imports="
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.process.INode  
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.process.IConnection
    java.util.List
    java.util.Map
    org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String connName = null;
if (node.getIncomingConnections().size()==1) {
	IConnection conn = node.getIncomingConnections().get(0);
	connName = conn.getName();
}

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null && connName != null) {
		List<? extends IConnection> conns = node.getOutgoingSortedConnections();
		List<? extends IConnection> connsUnique = node.getOutgoingConnections("UNIQUE");
		List<? extends IConnection> connsDuplicate = node.getOutgoingConnections("DUPLICATE");
		String onlyOnceEachDuplicatedKey = ElementParameterParser.getValue(node, "__ONLY_ONCE_EACH_DUPLICATED_KEY__");
		List<Map<String, String>> keyColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__UNIQUE_KEY__");
		boolean hasKey = true;
		int ii = 0;
		for(Map<String, String> keyColumn:keyColumns){
			if(keyColumn.get("KEY_ATTRIBUTE").equals("true")){
				hasKey = true;
				break;
			}
		}
		//begin hasKey
		if(hasKey){
%>
<%
			if (conns!=null) {
				if (conns.size()>0) {
					for (int i=0;i<conns.size();i++) {
						IConnection conn = conns.get(i);
						if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
			    	 		<%=conn.getName() %> = null;			
<%					 
						}
					}
				}
			}
%>	
			Boolean isMatch_<%=cid %> = true;
			
<%
			for (IMetadataColumn column: metadata.getListColumns()) {
				Map<String, String> keyColumn = keyColumns.get(ii);
				if (keyColumn.get("KEY_ATTRIBUTE").equals("true")) {
					String matchingType = keyColumn.get("MATCHING_TYPE");
					Integer minDistance = Integer.parseInt(keyColumn.get("MIN_DISTANCE"));
					Integer maxDistance = Integer.parseInt(keyColumn.get("MAX_DISTANCE"));
					String colName = keyColumn.get("SCHEMA_COLUMN");
%>
					<%=colName %>_currentRowKey<%=cid %> = (<%=connName %>.<%=column.getLabel() %>!=null)?<%=connName %>.<%=column.getLabel() %>.toString()<%=((!keyColumn.get("CASE_SENSITIVE").equals("true"))?".toLowerCase()":"")%>:null;

					if(isMatch_<%=cid %>){
						isMatch_<%=cid %> = false;
<%				
						if(matchingType.equals("EXACT_MATCH")){
%>
							java.util.Iterator<String> <%=colName %>_it_<%=cid %> = <%=colName %>_keys_<%=cid %>.iterator();
							int <%=colName %>_time_<%=cid %> = 0;
							while(<%=colName %>_it_<%=cid %>.hasNext()){
								String str_<%=cid %> = <%=colName %>_it_<%=cid %>.next();
								if(str_<%=cid %> == null){
									if(str_<%=cid %> == (<%=colName %>_currentRowKey<%=cid %>)){
										isMatch_<%=cid %> = true;
										dId_<%=cid %> = <%=colName %>_time_<%=cid %>;
										break;
									}else{
										<%=colName %>_time_<%=cid %>++;
									}
								}else {
									if(str_<%=cid %>.equals(<%=colName %>_currentRowKey<%=cid %>)){
										isMatch_<%=cid %> = true;
										dId_<%=cid %> = <%=colName %>_time_<%=cid %>;
										break;
									}else{
										<%=colName %>_time_<%=cid %>++;
									}
								}
							}
<%
						}else if(matchingType.equals("LEVENSHTEIN")){
%>
							java.util.Iterator<String> <%=colName %>_it_<%=cid %> = <%=colName %>_keys_<%=cid %>.iterator();
							int <%=colName %>_time_<%=cid %> = 0;
							while(<%=colName %>_it_<%=cid %>.hasNext()){
								String lookUpValue_<%=cid%> = <%=colName %>_it_<%=cid %>.next();
								if(lookUpValue_<%=cid%> == null || <%=colName %>_currentRowKey<%=cid %> == null){
									if(<%=colName %>_currentRowKey<%=cid %> == lookUpValue_<%=cid%>){
		                        		isMatch_<%=cid %> = true;
		                        		dId_<%=cid %> = <%=colName %>_time_<%=cid %>;                        		
		                            	break;       
		                        	}else{
		                        		<%=colName %>_time_<%=cid %>++;
		                        	}
								}else{
									int distance_<%=cid%> = org.apache.commons.lang.StringUtils.getLevenshteinDistance(<%=colName %>_currentRowKey<%=cid %>, lookUpValue_<%=cid%><%if(!keyColumn.get("CASE_SENSITIVE").equals("true")){%>.toLowerCase()<%}%>);
									if(<%=minDistance%> <= distance_<%=cid%> && distance_<%=cid%> <= <%=maxDistance%>){
		                        		isMatch_<%=cid %> = true;
		                        		dId_<%=cid %> = <%=colName %>_time_<%=cid %>;                        		
		                            	break;       
		                        	}else{
		                        		<%=colName %>_time_<%=cid %>++;
		                        	}
								}
							}
							
<%
						}else if(matchingType.equals("METAPHONE")){
%>
							org.apache.commons.codec.language.Metaphone <%=colName %>_metaphone_<%=cid %> = new org.apache.commons.codec.language.Metaphone();
							java.util.Iterator<String> <%=colName %>_it_<%=cid %> = <%=colName %>_keys_<%=cid %>.iterator();
							int <%=colName %>_time_<%=cid %> = 0;
							while(<%=colName %>_it_<%=cid %>.hasNext()){
	                        	String lookUpValue_<%=cid%> = <%=colName %>_it_<%=cid %>.next();
	                        	
	                        	if(lookUpValue_<%=cid%> == null){
		                        	if(lookUpValue_<%=cid%> == <%=colName %>_currentRowKey<%=cid %>){
		                        		isMatch_<%=cid %> = true;
		                        		dId_<%=cid %> = <%=colName %>_time_<%=cid %>;
		                        		break;
		                        	}else{
		                        		<%=colName %>_time_<%=cid %>++;
		                        	}
		                        }else if("".equals(lookUpValue_<%=cid%>) || "".equals(<%=colName %>_currentRowKey<%=cid %>)){
		                        	if((lookUpValue_<%=cid%>).equals(<%=colName %>_currentRowKey<%=cid %>)){
	                        			isMatch_<%=cid %> = true;
	                        			dId_<%=cid %> = <%=colName %>_time_<%=cid %>;
	                        			break;
	                        		}else{
	                        			<%=colName %>_time_<%=cid %>++;
	                        		}
	                        	}else{
		                        	if(<%=colName %>_metaphone_<%=cid %>.metaphone(lookUpValue_<%=cid%>).equals(<%=colName %>_metaphone_<%=cid %>.metaphone(<%=colName %>_currentRowKey<%=cid %>))){
		                        		isMatch_<%=cid %> = true;
		                        		dId_<%=cid %> = <%=colName %>_time_<%=cid %>;
		                        		break;
		                        	}else{
		                        		<%=colName %>_time_<%=cid %>++;
		                        	}
	                        	}
	                        }
<%
						}else if(matchingType.equals("DOUBLE_METAPHONE")){
%>
							org.apache.commons.codec.language.DoubleMetaphone <%=colName %>_doublemetaphone_<%=cid %> = new org.apache.commons.codec.language.DoubleMetaphone();
							<%=colName %>_currentRowKey<%=cid %> = (<%=connName %>.<%=column.getLabel() %>!=null)?<%=connName %>.<%=column.getLabel() %>.toString()<%=((!keyColumn.get("CASE_SENSITIVE").equals("true"))?".toLowerCase()":"")%>:null;
							java.util.Iterator<String> <%=colName %>_it_<%=cid %> = <%=colName %>_keys_<%=cid %>.iterator();
							int <%=colName %>_time_<%=cid %> = 0;
							while(<%=colName %>_it_<%=cid %>.hasNext()){
	                        	String lookUpValue_<%=cid%> = <%=colName %>_it_<%=cid %>.next();
	                        	if(lookUpValue_<%=cid%> == null){
	                        		if(lookUpValue_<%=cid%> == <%=colName %>_currentRowKey<%=cid %>){
	                        			isMatch_<%=cid %> = true;
	                        			dId_<%=cid %> = <%=colName %>_time_<%=cid %>;
	                        			break;
	                        		}else{
	                        			<%=colName %>_time_<%=cid %>++;
	                        		}
	                        	}else if("".equals(lookUpValue_<%=cid%>) || "".equals(<%=colName %>_currentRowKey<%=cid %>)){
	                        		if((lookUpValue_<%=cid%>).equals(<%=colName %>_currentRowKey<%=cid %>)){
	                        			isMatch_<%=cid %> = true;
	                        			dId_<%=cid %> = <%=colName %>_time_<%=cid %>;
	                        			break;
	                        		}else{
	                        			<%=colName %>_time_<%=cid %>++;
	                        		}
	                        	}else{
		                        	if((<%=colName %>_doublemetaphone_<%=cid %>.doubleMetaphone(lookUpValue_<%=cid%>)).equals(<%=colName %>_doublemetaphone_<%=cid %>.doubleMetaphone(<%=colName %>_currentRowKey<%=cid %>))){
		                        		isMatch_<%=cid %> = true;
		                        		dId_<%=cid %> = <%=colName %>_time_<%=cid %>;
		                        		break;
		                        	}else{
		                        		<%=colName %>_time_<%=cid %>++;
		                        	}
	                        	}
	                        }
<%
						}
%>
					}
<%					
				}
				ii++;
			} 
%>
			
			if (!isMatch_<%=cid %>) {
			
<%
				for(Map<String, String> keyColumn:keyColumns){
					if(keyColumn.get("KEY_ATTRIBUTE").equals("true")){
						String colName = keyColumn.get("SCHEMA_COLUMN");
%>
						<%=colName %>_keys_<%=cid %>.add(<%=colName %>_currentRowKey<%=cid %>);

<%
					}
				}

				
				
				if (connsUnique!=null) {
					if (connsUnique.size()>0) {
						for (int i=0;i<connsUnique.size();i++) {
							IConnection conn = connsUnique.get(i);
							if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
								if(<%=conn.getName() %> == null){ 
									<%=conn.getName() %> = new <%=conn.getName() %>Struct();
								}
								<%=conn.getName() %>.UID = String.valueOf(uId_<%=cid %>);
<%
			    	 			for (IMetadataColumn column: metadata.getListColumns()) {
			    	 				
%>			
		    	 					<%=conn.getName() %>.<%=column.getLabel() %> = <%=connName %>.<%=column.getLabel() %>;			
<%					 
								}
							}
						}
					}
				}
%>		
				uId_<%=cid %>++;
				nb_uniques_<%=cid %>++;
			} else {
<%
				if (connsDuplicate!=null) {
					if (connsDuplicate.size()>0) {
						for (int i=0;i<connsDuplicate.size();i++) {
							IConnection conn = connsDuplicate.get(i);
							if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
								if(<%=conn.getName() %> == null){ 
									<%=conn.getName() %> = new <%=conn.getName() %>Struct();
								}
								<%=conn.getName() %>.FID = String.valueOf(dId_<%=cid %>);
<%
			    	 			for (IMetadataColumn column: metadata.getListColumns()) {
			    	 				
%>
			    	 				<%=conn.getName() %>.<%=column.getLabel() %> = <%=connName %>.<%=column.getLabel() %>;			
<%					 
								}
							}
						}
					}
				}
%>
	  			nb_duplicates_<%=cid %>++;
			}
<%
		//end hasKey
		}else{
			if (conns!=null) {
				if (conns.size()>0) {
					for (int i=0;i<conns.size();i++) {
						IConnection conn = conns.get(i);
			    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			    			for (IMetadataColumn column: metadata.getListColumns()) {
%>
			    	 			<%=conn.getName() %>.<%=column.getLabel() %> = <%=connName %>.<%=column.getLabel() %>;			
<%						
							}
						}
					}
				}
			}
		}
	}
}
%>