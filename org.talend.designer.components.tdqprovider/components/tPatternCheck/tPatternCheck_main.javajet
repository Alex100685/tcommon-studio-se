<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map
    	java.util.regex.Pattern
		java.util.regex.Matcher
		java.util.regex.PatternSyntaxException
	" 
%>
<% CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();


// Définition des paramètres

String CustomPattern= ElementParameterParser.getValue(node, "__PATTERN__");
String PatternList= ElementParameterParser.getValue(node, "__PATTERN_LIST__");
String ColumnToCheck=ElementParameterParser.getValue(node, "__COLUMN2CHECK__");

	
	if(PatternList.equals("\"CUSTOM2\"")){%>
	String stringpattern_<%=cid %>=<%=CustomPattern %>;
	
<% 	} else{%>
	String stringpattern_<%=cid %>=<%=PatternList %>;
<% 	} 

// Définition des connexions



// Définition du lien d'entrée

String connName = null;
if (node.getIncomingConnections().size()==1) {
	IConnection conn = node.getIncomingConnections().get(0);
	connName = conn.getName();
}



List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null && connName != null) {
	
		List<? extends IConnection> conns = node.getOutgoingSortedConnections();
		List<? extends IConnection> connPatternOk = node.getOutgoingConnections("ROW_PATTERN_OK");
		List<? extends IConnection> connPatternNOk = node.getOutgoingConnections("ROW_PATTERN_NOK");
	
	%>
	
	<%
	if (conns!=null) {
		if (conns.size()>0) {
			for (int i=0;i<conns.size();i++) {
				IConnection conn = conns.get(i);
				if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		
	%>
	
	
	<%=conn.getName() %> = null;
	
	
try{



java.util.regex.Pattern pattern_<%=cid %>=java.util.regex.Pattern.compile(stringpattern_<%=cid %>);
java.util.regex.Matcher matcher_<%=cid %>=pattern_<%=cid %>.matcher(<%=connName %>.<%=ColumnToCheck %>);

result_<%=cid %> =matcher_<%=cid %>.matches();

} catch(NullPointerException ne){

result_<%=cid%>=false;	

} catch(java.util.regex.PatternSyntaxException pe){

System.err.println("Error in component tPatternCheck: the pattern defined contains errors");

System.exit(0);

}


if(!result_<%=cid %>){

<%
	if (connPatternNOk!=null) {
		if (connPatternNOk.size()>0) {
			for (int j=0;j<connPatternNOk.size();j++) {
				IConnection connKO = connPatternNOk.get(j);
				if (connKO.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				%>
                    if(<%=connKO.getName() %> == null){ 
                    	<%=connKO.getName() %> = new <%=connKO.getName() %>Struct();
                    }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
			    	 %>
			    	 <%=connKO.getName() %>.<%=column.getLabel() %> = <%=connName %>.<%=column.getLabel() %>;			
<%					 }
				}
			}
		}
	}
%>

nb_line_reject_<%=cid%>++;


	
} else {



<%
	if (connPatternOk!=null) {
		if (connPatternOk.size()>0) {
			for (int k=0;k<connPatternOk.size();k++) {
				IConnection connOK = connPatternOk.get(k);
				if (connOK.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				%>
                    if(<%=connOK.getName() %> == null){ 
                    	<%=connOK.getName() %> = new <%=connOK.getName() %>Struct();
                    }				
<%
			    	 for (IMetadataColumn column: metadata.getListColumns()) {
			    	 %>
			    	 <%=connOK.getName() %>.<%=column.getLabel() %> = <%=connName %>.<%=column.getLabel() %>;			
<%					 }
				}
			}
		}
	}
%>

nb_line_ok_<%=cid%>++;

}

nb_line_<%=cid%>++;

	<%	
							}
						}
					}
				}
			}
		}
	%>
						
						
						
						
						
						
						
						
						
						
						

















						
						



