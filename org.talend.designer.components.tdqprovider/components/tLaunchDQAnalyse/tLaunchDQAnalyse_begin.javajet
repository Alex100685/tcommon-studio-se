<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable 
    	org.talend.core.model.metadata.IMetadataColumn 
    	org.talend.core.model.process.IConnection
    	java.util.List
    	java.util.Map
	"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String tdqInstallDir = ElementParameterParser.getValue(node, "__TDQ_INSTALL_DIR__").replace("\\","/");
	
	String tdqDirectory = new String(new java.io.File(tdqInstallDir).getParent());	
	tdqDirectory = tdqDirectory.replace('\\', '/');
	String reportFile  = ElementParameterParser.getValue(node, "__REPORT_FILE__");

	String cmd = new String("\"\"");
	if(tdqInstallDir.indexOf(".exe") > 0){
		cmd = new String("\"cmd /c \"");
	}
%>
	String command_<%=cid %> = new String(<%= cmd %>+<%= tdqInstallDir %>+" -nosplash -application org.talend.dataprofiler.core.tdq.ReportRunner -consoleLog -data "+<%= tdqDirectory %>/workspace -vmargs -DREPORT_FILES_TO_EXECUTE=/Data Profiling/Reports/"+<%= reportFile %>);
	Runtime runtime_<%=cid %> = Runtime.getRuntime();
	String[] env_<%=cid %>= null;
	final Process process_<%=cid %> = runtime_<%=cid %>.exec(command_<%=cid %>,env_<%=cid %>);
	Thread normal_<%=cid %> = new Thread() {
		public void run() {
			try {
				java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getInputStream()));
				String line = "";
				try {
					while((line = reader.readLine()) != null) {
					   System.out.println(line);
					}
				} finally {
					 reader.close();
				}
			}catch(java.io.IOException ioe) {
				ioe.printStackTrace();
			}
		}
	};
	normal_<%=cid %>.start();
	
	Thread error_<%=cid %> = new Thread() {
		public void run() {
			try {
				java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process_<%=cid %>.getErrorStream()));
				String line = "";
				try {
					while((line = reader.readLine()) != null) {
						System.err.println(line);
					}
				} finally {
					reader.close();
				}
			} catch(java.io.IOException ioe) {
			   ioe.printStackTrace();
			}
		}
	};
	error_<%=cid %>.start();
	
	process_<%=cid %>.waitFor();
	
	normal_<%=cid %>.interrupt();
	
	error_<%=cid %>.interrupt();