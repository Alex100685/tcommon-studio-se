/*
* generated by Xtext
*/
package org.talend.metalanguage.job.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.talend.metalanguage.job.ui.contentassist.AbstractJobProposalProvider;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class JobProposalProvider extends AbstractJobProposalProvider {

	@Override
	public void completeConnectionType_ConnectorName(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		// TODO Auto-generated method stub
		super
				.completeConnectionType_ConnectorName(model, assignment, context,
						acceptor);
		// compute the plain proposal
		  String proposal = "Description for model #";

		  // convert it to a valid STRING-terminal
		  proposal = getValueConverter().toString(proposal, "STRING");

		  // create the completion proposal
		  // the result may be null as the createCompletionProposal(..) methods 
		  // check for valid prefixes
		  // and terminal token conflicts
		  ICompletionProposal completionProposal = 
		    createCompletionProposal(proposal, context);

		  // register the proposal, the acceptor handles null-values gracefully
		  acceptor.accept(completionProposal);
	}
	
}
