/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.talend.dataquality.indicators.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.talend.dataquality.indicators.util.IndicatorsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IndicatorsItemProviderAdapterFactory extends IndicatorsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public IndicatorsItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.Indicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IndicatorItemProvider indicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.Indicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIndicatorAdapter() {
        if (indicatorItemProvider == null) {
            indicatorItemProvider = new IndicatorItemProvider(this);
        }

        return indicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.RowCountIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RowCountIndicatorItemProvider rowCountIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.RowCountIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRowCountIndicatorAdapter() {
        if (rowCountIndicatorItemProvider == null) {
            rowCountIndicatorItemProvider = new RowCountIndicatorItemProvider(this);
        }

        return rowCountIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.CompositeIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CompositeIndicatorItemProvider compositeIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.CompositeIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCompositeIndicatorAdapter() {
        if (compositeIndicatorItemProvider == null) {
            compositeIndicatorItemProvider = new CompositeIndicatorItemProvider(this);
        }

        return compositeIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.RangeIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RangeIndicatorItemProvider rangeIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.RangeIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRangeIndicatorAdapter() {
        if (rangeIndicatorItemProvider == null) {
            rangeIndicatorItemProvider = new RangeIndicatorItemProvider(this);
        }

        return rangeIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.BoxIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BoxIndicatorItemProvider boxIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.BoxIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBoxIndicatorAdapter() {
        if (boxIndicatorItemProvider == null) {
            boxIndicatorItemProvider = new BoxIndicatorItemProvider(this);
        }

        return boxIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.IndicatorType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IndicatorTypeItemProvider indicatorTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.IndicatorType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIndicatorTypeAdapter() {
        if (indicatorTypeItemProvider == null) {
            indicatorTypeItemProvider = new IndicatorTypeItemProvider(this);
        }

        return indicatorTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.IntegerSumIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IntegerSumIndicatorItemProvider integerSumIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.IntegerSumIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIntegerSumIndicatorAdapter() {
        if (integerSumIndicatorItemProvider == null) {
            integerSumIndicatorItemProvider = new IntegerSumIndicatorItemProvider(this);
        }

        return integerSumIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.DoubleSumIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DoubleSumIndicatorItemProvider doubleSumIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.DoubleSumIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDoubleSumIndicatorAdapter() {
        if (doubleSumIndicatorItemProvider == null) {
            doubleSumIndicatorItemProvider = new DoubleSumIndicatorItemProvider(this);
        }

        return doubleSumIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.BigDecimalIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BigDecimalIndicatorItemProvider bigDecimalIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.BigDecimalIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBigDecimalIndicatorAdapter() {
        if (bigDecimalIndicatorItemProvider == null) {
            bigDecimalIndicatorItemProvider = new BigDecimalIndicatorItemProvider(this);
        }

        return bigDecimalIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.FrequencyIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FrequencyIndicatorItemProvider frequencyIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.FrequencyIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFrequencyIndicatorAdapter() {
        if (frequencyIndicatorItemProvider == null) {
            frequencyIndicatorItemProvider = new FrequencyIndicatorItemProvider(this);
        }

        return frequencyIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.IntegerMeanIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IntegerMeanIndicatorItemProvider integerMeanIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.IntegerMeanIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIntegerMeanIndicatorAdapter() {
        if (integerMeanIndicatorItemProvider == null) {
            integerMeanIndicatorItemProvider = new IntegerMeanIndicatorItemProvider(this);
        }

        return integerMeanIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.DoubleMeanIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DoubleMeanIndicatorItemProvider doubleMeanIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.DoubleMeanIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDoubleMeanIndicatorAdapter() {
        if (doubleMeanIndicatorItemProvider == null) {
            doubleMeanIndicatorItemProvider = new DoubleMeanIndicatorItemProvider(this);
        }

        return doubleMeanIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.BigDecimalMeanIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BigDecimalMeanIndicatorItemProvider bigDecimalMeanIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.BigDecimalMeanIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBigDecimalMeanIndicatorAdapter() {
        if (bigDecimalMeanIndicatorItemProvider == null) {
            bigDecimalMeanIndicatorItemProvider = new BigDecimalMeanIndicatorItemProvider(this);
        }

        return bigDecimalMeanIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.BlankCountIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BlankCountIndicatorItemProvider blankCountIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.BlankCountIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBlankCountIndicatorAdapter() {
        if (blankCountIndicatorItemProvider == null) {
            blankCountIndicatorItemProvider = new BlankCountIndicatorItemProvider(this);
        }

        return blankCountIndicatorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.IndicatorParameters} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IndicatorParametersItemProvider indicatorParametersItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.IndicatorParameters}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIndicatorParametersAdapter() {
        if (indicatorParametersItemProvider == null) {
            indicatorParametersItemProvider = new IndicatorParametersItemProvider(this);
        }

        return indicatorParametersItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.talend.dataquality.indicators.MedianIndicator} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MedianIndicatorItemProvider medianIndicatorItemProvider;

    /**
     * This creates an adapter for a {@link org.talend.dataquality.indicators.MedianIndicator}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMedianIndicatorAdapter() {
        if (medianIndicatorItemProvider == null) {
            medianIndicatorItemProvider = new MedianIndicatorItemProvider(this);
        }

        return medianIndicatorItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (indicatorItemProvider != null) indicatorItemProvider.dispose();
        if (rowCountIndicatorItemProvider != null) rowCountIndicatorItemProvider.dispose();
        if (compositeIndicatorItemProvider != null) compositeIndicatorItemProvider.dispose();
        if (rangeIndicatorItemProvider != null) rangeIndicatorItemProvider.dispose();
        if (boxIndicatorItemProvider != null) boxIndicatorItemProvider.dispose();
        if (indicatorTypeItemProvider != null) indicatorTypeItemProvider.dispose();
        if (integerSumIndicatorItemProvider != null) integerSumIndicatorItemProvider.dispose();
        if (doubleSumIndicatorItemProvider != null) doubleSumIndicatorItemProvider.dispose();
        if (bigDecimalIndicatorItemProvider != null) bigDecimalIndicatorItemProvider.dispose();
        if (frequencyIndicatorItemProvider != null) frequencyIndicatorItemProvider.dispose();
        if (integerMeanIndicatorItemProvider != null) integerMeanIndicatorItemProvider.dispose();
        if (doubleMeanIndicatorItemProvider != null) doubleMeanIndicatorItemProvider.dispose();
        if (bigDecimalMeanIndicatorItemProvider != null) bigDecimalMeanIndicatorItemProvider.dispose();
        if (blankCountIndicatorItemProvider != null) blankCountIndicatorItemProvider.dispose();
        if (indicatorParametersItemProvider != null) indicatorParametersItemProvider.dispose();
        if (medianIndicatorItemProvider != null) medianIndicatorItemProvider.dispose();
    }

}
