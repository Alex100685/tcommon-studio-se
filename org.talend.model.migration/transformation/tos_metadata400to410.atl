-- @atlcompiler atl2006
-- Generated by: $Id$
-- @path INMODEL=/org.talend.model.migration/migration_metamodel/metadata400forMigration.ecore
-- @path OUTMODEL=/org.talend.model.migration/migration_metamodel/metadata410forMigration.ecore
-- @path MIGMODEL=/org.talend.model.migration/migration_metamodel/migration.ecore

module TosMetadata400to410;

create OUT : OUTMODEL from IN : INMODEL;
helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

helper context OclAny def : isInElement : Boolean =
	thisModule.inElements->includes(self);

-- this helper may be use to call java code during the ATL transformation
-- as long as the object created defins some operations that are implemented
-- and that the metadata defined for the transformation is registered as a nsURI and not a path to the ecore.
--helper def : Migration : MIGMODEL!"migration::MigrationMetadata400to410" = OclUndefined;
--
--entrypoint rule initialization() {
--	to mig : MIGMODEL!"migration::MigrationMetadata400to410"
--	do {
--		thisModule.Migration <- mig;
--	}
--}



rule Metadata {
    from s : INMODEL!"connection::Metadata" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::Metadata" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        connections <- s.connections)
}
helper def : id : Integer = 0;
		
rule GenericConnection {
    from s : INMODEL!"connection::Connection" (
		if s.oclIsTypeOf(INMODEL!"connection::Connection") then
			s.isInElement
		else false endif)
    to t : OUTMODEL!"connection::Connection"(
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
--        tables <- s.tables, removed see dataPackage
   		dataPackage <- Sequence{newGenericPackage},
		queries <- s.queries
		),
		newGenericPackage : OUTMODEL!"connection::GenericPackage" (
				ownedElement <- s.tables
		)
}




rule FileConnection {
    from s : INMODEL!"connection::FileConnection" 
    to t : OUTMODEL!"connection::FileConnection"(
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
--        tables <- s.tables, removed see sub rules dataPackage
		dataPackage <- Sequence{newRecordFile},
		queries <- s.queries,
    	Server <- s.Server,
        FilePath <- s.FilePath,
        Format <- s.Format,
        Encoding <- s.Encoding,
        FieldSeparatorValue <- s.FieldSeparatorValue,
        RowSeparatorType <- s.RowSeparatorType,
        RowSeparatorValue <- s.RowSeparatorValue,
        TextIdentifier <- s.TextIdentifier,
        UseHeader <- s.UseHeader,
        HeaderValue <- s.HeaderValue,
        UseFooter <- s.UseFooter,
        FooterValue <- s.FooterValue,
        UseLimit <- s.UseLimit,
        LimitValue <- s.LimitValue,
        FirstLineCaption <- s.FirstLineCaption,
        RemoveEmptyRow <- s.RemoveEmptyRow,
        EscapeType <- s.EscapeType,
        EscapeChar <- s.EscapeChar,
        TextEnclosure <- s.TextEnclosure,
        CsvOption <- s.CsvOption),
		newRecordFile : OUTMODEL!"orgomg::cwm::resource::record::RecordFile" (
				ownedElement <- s.tables)
}

abstract rule AbstractMetadataColumn {
    from s : INMODEL!"connection::MetadataColumn" (
		if s.oclIsKindOf(INMODEL!"connection::MetadataColumn") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"connection::MetadataColumn" (
    	properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        sourceType <- s.sourceType,
--        defaultValue <- s.defaultValue, see initialValue
		initialValue <- newInitialValue,
		talendType <- s.talendType,
        key <- s.key,
        nullable <- s.nullable,
        length <- s.length,
        precision <- s.precision, 
--        originalField <- s.originalField, see Name
		name <- s.originalField,
        pattern <- s.pattern,
        displayField <- s.displayField),
		newInitialValue : OUTMODEL!"orgomg::cwm::objectmodel::core::Expression" (
			body <- s.defaultValue
		)
}

rule MetadataColumn extends AbstractMetadataColumn {
    from s : INMODEL!"connection::MetadataColumn"
    to t : OUTMODEL!"connection::MetadataColumn"
}

rule TdColumn extends MetadataColumn {
    from s : INMODEL!"connection::MetadataColumn" ((s.table.tableType = 'TABLE') or (s.table.tableType = 'VIEW'))
    to t : OUTMODEL!"connection::cwm::relational::TdColumn" 
}

abstract rule AbstractMetadataTable {
    from s : INMODEL!"connection::MetadataTable" (
		if s.oclIsKindOf(INMODEL!"connection::MetadataTable") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"connection::MetadataTable" (
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
--		sourceName <- s.sourceName, see name 
        name <- s.sourceName,
        tableType <- s.tableType,
        attachedCDC <- s.attachedCDC,
        activatedCDC <- s.activatedCDC,
        feature <- s.columns)
}

rule MetadataTable extends AbstractMetadataTable{
    from s : INMODEL!"connection::MetadataTable" 
    to t : OUTMODEL!"connection::MetadataTable"
}

rule DbTable extends MetadataTable{
    from s : INMODEL!"connection::MetadataTable" ( s.tableType = 'TABLE') 
    to t : OUTMODEL!"connection::cwm::relational::TdTable"
}

rule DbView extends MetadataTable{
    from s : INMODEL!"connection::MetadataTable" ( s.tableType = 'VIEW') 
    to t : OUTMODEL!"connection::cwm::relational::TdView"
}



rule DelimitedFileConnection extends FileConnection{
    from s : INMODEL!"connection::DelimitedFileConnection"
    to t : OUTMODEL!"connection::DelimitedFileConnection" (
        FieldSeparatorType <- s.FieldSeparatorType,
        splitRecord <- s.splitRecord)
}

rule PositionalFileConnection extends FileConnection{
    from s : INMODEL!"connection::PositionalFileConnection" 
    to t : OUTMODEL!"connection::PositionalFileConnection"
}

rule EbcdicConnection extends FileConnection{
    from s : INMODEL!"connection::EbcdicConnection" 
    to t : OUTMODEL!"connection::EbcdicConnection" (
        MidFile <- s.MidFile,
        DataFile <- s.DataFile)
}

rule MDMConnection {
    from s : INMODEL!"connection::MDMConnection"
    to t : OUTMODEL!"connection::MDMConnection" (
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
--        tables <- s.tables, removed see dataPackage
   		dataPackage <- Sequence{newXmlSchemaPackage},
		queries <- s.queries,
    	Username <- s.Username,
        Password <- s.Password,
        Port <- s.Port,
        Server <- s.Server,
        Universe <- s.Universe,
        Datamodel <- s.Datamodel,
		schemas <- s.schemas,
        Datacluster <- s.Datacluster
		),
		newXmlSchemaPackage : OUTMODEL!"orgomg::cwm::resource::xml::Schema" (
				ownedElement <- s.tables)
}

rule DatabaseConnection {
    from s : INMODEL!"connection::DatabaseConnection"
    to t : OUTMODEL!"connection::DatabaseConnection" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
--        tables <- s.tables, removed see dataPackage
   		dataPackage <- Sequence{newSchema},
		queries <- s.queries,
    	DatabaseType <- s.DatabaseType,
        DriverJarPath <- s.DriverJarPath,
        DriverClass <- s.DriverClass,
        URL <- s.URL,
        dbVersionString <- s.dbVersionString,
        Port <- s.Port,
        Username <- s.Username,
        Password <- s.Password,
        ServerName <- s.ServerName,
        DatasourceName <- s.DatasourceName,
        FileFieldName <- s.FileFieldName,
--        Schema <- s.Schema, removed, see dataPackage
        SID <- s.SID,
        SqlSynthax <- s.SqlSynthax,
        StringQuote <- s.StringQuote,
        NullChar <- s.NullChar,
        DbmsId <- s.DbmsId,
        ProductId <- s.ProductId,
        DBRootPath <- s.DBRootPath,
        AdditionalParams <- s.AdditionalParams,
        StandardSQL <- s.StandardSQL,
        SystemSQL <- s.SystemSQL,
        cdcTypeMode <- s.cdcTypeMode,
        SQLMode <- s.SQLMode,
        cdcConns <- s.cdcConns,
		UiSchema <- s.Schema),
		newSchema : OUTMODEL!"orgomg::cwm::resource::relational::Schema" (
				name <- s.Schema,
				ownedElement <- s.tables)
}

rule SAPConnection extends GenericConnection{
    from s : INMODEL!"connection::SAPConnection" 
    to t : OUTMODEL!"connection::SAPConnection" (
        Host <- s.Host,
        Username <- s.Username,
        Password <- s.Password,
        Client <- s.Client,
        SystemNumber <- s.SystemNumber,
        Language <- s.Language,
        currentFucntion <- s.currentFucntion,
        Funtions <- s.Funtions)
}

rule SAPFunctionUnit {
    from s : INMODEL!"connection::SAPFunctionUnit" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SAPFunctionUnit" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        name <- s.Name,
        OutputType <- s.OutputType,
        OutputTableName <- s.OutputTableName,
--		Document <- s.Document see description
        description <- Sequence{newDescription},
        InputParameterTable <- s.InputParameterTable,
        OutputParameterTable <- s.OutputParameterTable,
        MetadataTable <- s.MetadataTable,
        tables <- s.tables,
        TestInputParameterTable <- s.TestInputParameterTable),
		newDescription : OUTMODEL!"orgomg::cwm::foundation::businessinformation::Description" (
			body <- s.Document	
		)
}

rule SAPFunctionParameterColumn {
    from s : INMODEL!"connection::SAPFunctionParameterColumn" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SAPFunctionParameterColumn" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        name <- s.Name,
        ParameterType <- s.ParameterType,
        StructureOrTableName <- s.StructureOrTableName,
        DataType <- s.DataType,
        Length <- s.Length,
        description <- Sequence{newDescription},
        Value <- s.Value),
		newDescription : OUTMODEL!"orgomg::cwm::foundation::businessinformation::Description" (
			body <- s.Description	
		)
}

rule SAPFunctionParameterTable {
    from s : INMODEL!"connection::SAPFunctionParameterTable" (
		if s.oclIsTypeOf(INMODEL!"connection::SAPFunctionParameterTable") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"connection::SAPFunctionParameterTable" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        columns <- s.columns)
}

rule InputSAPFunctionParameterTable {
    from s : INMODEL!"connection::InputSAPFunctionParameterTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::InputSAPFunctionParameterTable" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        columns <- s.columns)
}

rule OutputSAPFunctionParameterTable {
    from s : INMODEL!"connection::OutputSAPFunctionParameterTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::OutputSAPFunctionParameterTable" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        columns <- s.columns)
}

rule RegexpFileConnection extends FileConnection{
    from s : INMODEL!"connection::RegexpFileConnection"
    to t : OUTMODEL!"connection::RegexpFileConnection" (
        FieldSeparatorType <- s.FieldSeparatorType)
}

rule XmlFileConnection extends GenericConnection{
    from s : INMODEL!"connection::XmlFileConnection" 
    to t : OUTMODEL!"connection::XmlFileConnection" (
        XsdFilePath <- s.XsdFilePath,
        XmlFilePath <- s.XmlFilePath,
        Guess <- s.Guess,
        MaskXPattern <- s.MaskXPattern,
        Encoding <- s.Encoding,
        schema <- s.schema)
}

rule SchemaTarget {
    from s : INMODEL!"connection::SchemaTarget" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SchemaTarget" (
        
        RelativeXPathQuery <- s.RelativeXPathQuery,
        TagName <- s.TagName)
}

rule QueriesConnection {
    from s : INMODEL!"connection::QueriesConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::QueriesConnection" (
        
        "query" <- s."query")
}

rule Query {
    from s : INMODEL!"connection::Query" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::Query" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        value <- s.value,
        contextMode <- s.contextMode)
}

rule LdifFileConnection extends GenericConnection{
    from s : INMODEL!"connection::LdifFileConnection"
    to t : OUTMODEL!"connection::LdifFileConnection" (
        value <- s.value,
        FilePath <- s.FilePath,
        LimitEntry <- s.LimitEntry,
        UseLimit <- s.UseLimit,
        Server <- s.Server)
}

rule FileExcelConnection extends FileConnection{
    from s : INMODEL!"connection::FileExcelConnection" 
    to t : OUTMODEL!"connection::FileExcelConnection" (
        SheetName <- s.SheetName,
        sheetColumns <- s.sheetColumns,
        firstColumn <- s.firstColumn,
        lastColumn <- s.lastColumn,
        thousandSeparator <- s.thousandSeparator,
        decimalSeparator <- s.decimalSeparator,
        advancedSpearator <- s.advancedSpearator,
        selectAllSheets <- s.selectAllSheets,
        sheetList <- s.sheetList)
}

rule XmlXPathLoopDescriptor {
    from s : INMODEL!"connection::XmlXPathLoopDescriptor" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::XmlXPathLoopDescriptor" (
        
        LimitBoucle <- s.LimitBoucle,
        AbsoluteXPathQuery <- s.AbsoluteXPathQuery,
        schemaTargets <- s.schemaTargets)
}

rule GenericSchemaConnection extends GenericConnection{
    from s : INMODEL!"connection::GenericSchemaConnection"
    to t : OUTMODEL!"connection::GenericSchemaConnection" (
        mappingTypeUsed <- s.mappingTypeUsed,
        mappingTypeId <- s.mappingTypeId)
}

rule LDAPSchemaConnection extends GenericConnection{
    from s : INMODEL!"connection::LDAPSchemaConnection"
    to t : OUTMODEL!"connection::LDAPSchemaConnection" (
        Host <- s.Host,
        Port <- s.Port,
        Protocol <- s.Protocol,
        Filter <- s.Filter,
        Separator <- s.Separator,
        UseAdvanced <- s.UseAdvanced,
        StorePath <- s.StorePath,
        UseLimit <- s.UseLimit,
        UseAuthen <- s.UseAuthen,
        BindPrincipal <- s.BindPrincipal,
        BindPassword <- s.BindPassword,
        LimitValue <- s.LimitValue,
        EncryptionMethodName <- s.EncryptionMethodName,
        Value <- s.Value,
        SavePassword <- s.SavePassword,
        Aliases <- s.Aliases,
        Referrals <- s.Referrals,
        CountLimit <- s.CountLimit,
        TimeOutLimit <- s.TimeOutLimit,
        BaseDNs <- s.BaseDNs,
        GetBaseDNsFromRoot <- s.GetBaseDNsFromRoot,
        ReturnAttributes <- s.ReturnAttributes,
        SelectedDN <- s.SelectedDN)
}

rule WSDLSchemaConnection extends GenericConnection{
    from s : INMODEL!"connection::WSDLSchemaConnection"
    to t : OUTMODEL!"connection::WSDLSchemaConnection" (
        WSDL <- s.WSDL,
        needAuth <- s.needAuth,
        methodName <- s.methodName,
        parameters <- s.parameters,
        UserName <- s.UserName,
        Password <- s.Password,
        useProxy <- s.useProxy,
        proxyHost <- s.proxyHost,
        proxyPort <- s.proxyPort,
        proxyUser <- s.proxyUser,
        proxyPassword <- s.proxyPassword,
        Value <- s.Value,
        EndpointURI <- s.EndpointURI,
        Encoding <- s.Encoding,
        timeOut <- s.timeOut)
}

rule SalesforceSchemaConnection extends GenericConnection{
    from s : INMODEL!"connection::SalesforceSchemaConnection" 
    to t : OUTMODEL!"connection::SalesforceSchemaConnection" (
        webServiceUrl <- s.webServiceUrl,
        userName <- s.userName,
        password <- s.password,
        moduleName <- s.moduleName,
        queryCondition <- s.queryCondition,
        useCustomModuleName <- s.useCustomModuleName,
        useProxy <- s.useProxy,
        proxyHost <- s.proxyHost,
        proxyPort <- s.proxyPort,
        proxyUsername <- s.proxyUsername,
        proxyPassword <- s.proxyPassword,
        batchSize <- s.batchSize,
        useHttpProxy <- s.useHttpProxy,
        useAlphbet <- s.useAlphbet,
        timeOut <- s.timeOut)
}

rule CDCConnection {
    from s : INMODEL!"connection::CDCConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::CDCConnection" (
        
        cdcTypes <- s.cdcTypes)
}

rule CDCType {
    from s : INMODEL!"connection::CDCType" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::CDCType" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        linkDB <- s.linkDB,
        journalName <- s.journalName,
        subscribers <- s.subscribers,
        cdcConnection <- s.cdcConnection)
}

rule SubscriberTable extends MetadataTable{
    from s : INMODEL!"connection::SubscriberTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SubscriberTable" (
        system <- s.system,
        columns <- s.columns)
}

rule SAPTestInputParameterTable {
    from s : INMODEL!"connection::SAPTestInputParameterTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SAPTestInputParameterTable" (
        
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        columns <- s.columns)
}

rule Concept extends MetadataTable{
    from s : INMODEL!"connection::Concept" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::Concept" (
        LoopExpression <- s.LoopExpression,
        LoopLimit <- s.LoopLimit,
        columns <- s.columns,
        conceptTargets <- s.conceptTargets)
}

rule ConceptTarget {
    from s : INMODEL!"connection::ConceptTarget" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::ConceptTarget" (
        
        targetName <- s.targetName,
        RelativeLoopExpression <- s.RelativeLoopExpression)
}

rule HL7Connection extends FileConnection{
    from s : INMODEL!"connection::HL7Connection"
    to t : OUTMODEL!"connection::HL7Connection" (
        StartChar <- s.StartChar,
        EndChar <- s.EndChar)
}

