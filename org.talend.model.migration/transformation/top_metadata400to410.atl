-- @atlcompiler atl2006
-- Generated by: $Id$
-- @path INMODEL=/org.talend.model.migration/migration_metamodel/org.talend.cwm.ext400andCWMandAnalysis.ecore
-- @path OUTMODEL=/org.talend.model.migration/migration_metamodel/metadata410referingLocalCwm400andAnalysis.ecore


module TOPMetadata400to410;

create OUT : OUTMODEL from IN : INMODEL;
helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

helper context OclAny def : isInElement : Boolean =
	thisModule.inElements->includes(self);

helper def : getTaggedValueValue(mElement : INMODEL!"topcwm::cwm::objectmodel::core::ModelElement", key : String) : String =
	let theTag : INMODEL!"topcwm::cwm::objectmodel::core::TaggedValue" = thisModule.getTaggedValue(mElement,key) 
	in if theTag.oclIsUndefined() then OclUndefined else theTag.value endif ;  

helper def : getTaggedValue(mElement : INMODEL!"topcwm::cwm::objectmodel::core::ModelElement", key : String) : 
	INMODEL!"topcwm::cwm::objectmodel::core::TaggedValue" = mElement.taggedValue -> any(t | t.tag = key); 


--create a set of all the element from the theSet including the first PrimaryKey and excluding the others
helper def : keepFirstPK( theSet : Set(OclAny)) : Set(INMODEL!"topcwm::cwm::resource::relational::PrimaryKey") =
	let firstPK : INMODEL!"topcwm::cwm::resource::relational::PrimaryKey" = thisModule.getFirstPK(theSet)
	in theSet -> select(e | not(e.oclIsTypeOf(INMODEL!"topcwm::cwm::resource::relational::PrimaryKey")))-> append(firstPK);

--find the first PrimaryKey of the theSet
helper def : getFirstPK( theSet : Set(OclAny)) : INMODEL!"topcwm::cwm::resource::relational::PrimaryKey" =
		theSet -> select(e | e.oclIsTypeOf(INMODEL!"topcwm::cwm::resource::relational::PrimaryKey"))-> first(); 
--
-- WARNING : there is strange behaviour because if TdTable rule is in the first place in the 
-- file the the xmiId are not copied, if it is at the bottom of this file then the xmiId are copied but then the IDs of other rules are not
-- it seems that if I place the TdCatalog rule here everything is fine but I am not sure.
-- me guess is that rule of cantainers should be located before contained elements



rule "cwm::relational::TdCatalog" {
    from s : INMODEL!"topcwm::relational::TdCatalog" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Catalog" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        defaultCharacterSetName <- s.defaultCharacterSetName,
        defaultCollationName <- s.defaultCollationName,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "cwm::relational::TdTable" {
    from s : INMODEL!"topcwm::relational::TdTable" (thisModule.inElements->includes(s))
	using {
    	hasPK : Boolean = s.ownedElement -> exists(e | e.oclIsTypeOf(INMODEL!"topcwm::cwm::resource::relational::PrimaryKey"));
    }
    to t : OUTMODEL!"connection::cwm::relational::TdTable" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isTemporary <- s.isTemporary,
        temporaryScope <- s.temporaryScope,
        isSystem <- s.isSystem,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- if hasPK then Set{thisModule.keepFirstPK (s.ownedElement)} else s.ownedElement endif, 
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        usingTrigger <- s.usingTrigger,
        type <- s.type,
        optionScopeColumn <- s.optionScopeColumn,
        trigger <- s.trigger,
--attrbiute from MetadataTable
		tableType <- 'TABLE'
		)
}

rule "cwm::relational::TdView" {
    from s : INMODEL!"topcwm::relational::TdView" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::relational::TdView" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isReadOnly <- s.isReadOnly,
        checkOption <- s.checkOption,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        usingTrigger <- s.usingTrigger,
        type <- s.type,
        optionScopeColumn <- s.optionScopeColumn,
        queryExpression <- s.queryExpression,
--attrbiute from MetadataTable
		tableType <- 'VIEW'
    )
}


rule "cwm::relational::TdSchema" {
    from s : INMODEL!"topcwm::relational::TdSchema" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Schema" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "cwm::relational::TdColumn" {
    from s : INMODEL!"topcwm::relational::TdColumn" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::relational::TdColumn" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        precision <- s.precision,
        scale <- s.scale,
--		nullable <- s.isNullable,
        length <- s.length,
--        collationName <- s.collationName,
--        characterSetName <- s.characterSetName,
--        javaType <- s.javaType,   <- removed use sqlDataType.JavaDataType
--        clientDependency <- s.clientDependency,
--        supplierDependency <- s.supplierDependency,
--        constraint <- s.constraint,
--        importer <- s.importer,
--        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
--        document <- s.document,
--        description <- s.description,
--        responsibleParty <- s.responsibleParty,
--        elementNode <- s.elementNode,
--        set <- s.set,
--        renderedObject <- s.renderedObject,
--        vocabularyElement <- s.vocabularyElement,
--        measurement <- s.measurement,
--        changeRequest <- s.changeRequest,
--        dasdlProperty <- s.dasdlProperty,
--        featureNode <- s.featureNode,
--        featureMap <- s.featureMap,
--        cfMap <- s.cfMap,
--        multiplicity <- s.multiplicity,
--        type <- s.type,
--        slot <- s.slot,
--        discriminatedUnion <- s.discriminatedUnion,
--        indexedFeature <- s.indexedFeature,
--        keyRelationship <- s.keyRelationship,
-- change unique key reference to the first unique key
        uniqueKey <- if s.uniqueKey -> isEmpty() then Set{OclUndefined} else Set{thisModule.getFirstPK(s.owner.ownedElement)} endif ,
--        dataItem <- s.dataItem,
--        remap <- s.remap,
        initialValue <- s.initialValue,
--        referencedTableType <- s.referencedTableType,
--        optionScopeColumnSet <- s.optionScopeColumnSet,
        sqlDataType <- s.sqlDataType,
---------------------------------------------
--attributes inherited from MetadataTable
        label <- s.name,
--        readOnly <- s.readOnly,
--        synchronised <- s.synchronised,
--        divergency <- s.divergency,
        sourceType <- s.sqlDataType.name,
--        defaultValue <- s.defaultValue, see initialValue
--		talendType <- s.talendType, to be determined dynamically
		key <- s.uniqueKey -> exists(e | e.oclIsTypeOf(INMODEL!"topcwm::cwm::resource::relational::PrimaryKey")),
        nullable <- if s.isNullable = #columnNullable then true	else false	endif
--        originalField <- s.originalField, see Name
--        pattern <- s.pattern,
--        displayField <- s.displayField
	)
	do {
		t.sqlDataType.nullable <- s.isNullable;
	}
}

rule "cwm::relational::TdSqlDataType" {
    from s : INMODEL!"topcwm::relational::TdSqlDataType" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::relational::TdSqlDataType" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        typeNumber <- s.typeNumber,
        characterMaximumLength <- s.characterMaximumLength,
        characterOctetLength <- s.characterOctetLength,
        numericPrecision <- s.numericPrecision,
        numericPrecisionRadix <- s.numericPrecisionRadix,
        numericScale <- s.numericScale,
        dateTimePrecision <- s.dateTimePrecision,
        javaDataType <- s.javaDataType,
        nullable <- s.nullable,
        unsignedAttribute <- s.unsignedAttribute,
        caseSensitive <- s.caseSensitive,
        autoIncrement <- s.autoIncrement,
        localTypeName <- s.localTypeName,
        searchable <- s.searchable,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        sqlDistinctType <- s.sqlDistinctType)
}

rule "cwm::relational::TdTrigger" {
    from s : INMODEL!"topcwm::relational::TdTrigger" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::relational::TdTrigger" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        eventManipulation <- s.eventManipulation,
        actionOrientation <- s.actionOrientation,
        conditionTiming <- s.conditionTiming,
        conditionReferenceNewTable <- s.conditionReferenceNewTable,
        conditionReferenceOldTable <- s.conditionReferenceOldTable,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        actionCondition <- s.actionCondition,
        actionStatement <- s.actionStatement,
        usedColumnSet <- s.usedColumnSet,
        table <- s.table)
}

rule "cwm::relational::TdProcedure" {
    from s : INMODEL!"topcwm::relational::TdProcedure" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::relational::TdProcedure" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        isQuery <- s.isQuery,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        parameter <- s.parameter,
        body <- s.body,
        specification <- s.specification)
}

--rule "cwm::softwaredeployment::TdProviderConnection" {
--    from s : INMODEL!"topcwm::softwaredeployment::TdProviderConnection" (thisModule.inElements->includes(s))
--    to t : OUTMODEL!"connection::cwm::softwaredeployment::TdProviderConnection" (
--        
--        name <- s.name,
--        visibility <- s.visibility,
--        isReadOnly <- s.isReadOnly,
--        login <- s.login,
--        password <- s.password,
--        connectionString <- s.connectionString,
--        driverClassName <- s.driverClassName,
--        clientDependency <- s.clientDependency,
--        supplierDependency <- s.supplierDependency,
--        constraint <- s.constraint,
--        importer <- s.importer,
--        stereotype <- s.stereotype,
--        taggedValue <- s.taggedValue,
--        document <- s.document,
--        description <- s.description,
--        responsibleParty <- s.responsibleParty,
--        elementNode <- s.elementNode,
--        set <- s.set,
--        renderedObject <- s.renderedObject,
--        vocabularyElement <- s.vocabularyElement,
--        measurement <- s.measurement,
--        changeRequest <- s.changeRequest,
--        dasdlProperty <- s.dasdlProperty,
--        dataManager <- s.dataManager)
--}

rule "cwm::softwaredeployment::TdDataManager" {
    from s : INMODEL!"topcwm::softwaredeployment::TdDataManager" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::softwaredeployment::TdDataManager" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        pathname <- s.pathname,
        isCaseSensitive <- s.isCaseSensitive,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployedSoftwareSystem <- s.deployedSoftwareSystem,
        component <- s.component,
        clientConnection <- s.clientConnection,
        dataPackage <- s.dataPackage)
}

rule "cwm::softwaredeployment::TdDataProvider" {
    from s : INMODEL!"topcwm::softwaredeployment::TdDataProvider" (thisModule.inElements->includes(s) and thisModule.getTaggedValueValue(s.resourceConnection->first(), 'DBTYPE') <> 'MDM')
	using{
    	retrieveAll : INMODEL!"topcwm::cwm::objectmodel::core::TaggedValue" = s.resourceConnection->first().taggedValue -> any(val | val.tag = 'RETRIEVE_ALL');
    }
    to t : OUTMODEL!"connection::DatabaseConnection" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        pathname <- s.pathname,
        isCaseSensitive <- s.isCaseSensitive,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <-  if retrieveAll = OclUndefined then s.taggedValue else s.taggedValue -> including(thisModule.createTaggedValue(retrieveAll)) endif,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployedSoftwareSystem <- s.deployedSoftwareSystem,
        component <- s.component,
        clientConnection <- s.clientConnection,
        dataPackage <- s.dataPackage,
--        resourceConnection <- s.resourceConnection) we remove the TdProviderconnection
--new DatabaseConnection
        id <- s.__xmiID__,
        -- ? label <- s.label,
        --readOnly <- s.readOnly,
        --synchronised <- s.synchronised,
        --divergency <- s.divergency,
        --version <- s.version,
        --ContextMode <- s.ContextMode,
        --ContextId <- s.ContextId,
    	DatabaseType <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'DBTYPE') ,
--		,
--        DriverJarPath <- s.DriverJarPath,
        DriverClass <- (s.resourceConnection->first()).refGetValue('driverClassName'),
        URL <- (s.resourceConnection->first()).refGetValue('connectionString'),
--        dbVersionString <- s.dbVersionString,
        Port <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'PORT'),
        Username <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'user') ,
        Password <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'password'),
        ServerName <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'HOST'),
--        DatasourceName <- s.DatasourceName,
--        FileFieldName <- s.FileFieldName,
        SID <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'DBNAME')
--        SqlSynthax <- s.SqlSynthax,
--        StringQuote <- s.StringQuote,
--        NullChar <- s.NullChar,
--        DbmsId <- s.DbmsId,
--        ProductId <- s.ProductId,
--        DBRootPath <- s.DBRootPath,
--        AdditionalParams <- s.AdditionalParams,
--        StandardSQL <- s.StandardSQL,
--        SystemSQL <- s.SystemSQL,
--        cdcTypeMode <- s.cdcTypeMode,
--        SQLMode <- s.SQLMode,
--        cdcConns <- s.cdcConns		
		)
}

rule MDMConnection {
    from s : INMODEL!"topcwm::softwaredeployment::TdDataProvider" (thisModule.inElements->includes(s) and thisModule.getTaggedValueValue(s.resourceConnection->first(), 'DBTYPE') = 'MDM')
	using{
    	retrieveAll : INMODEL!"topcwm::cwm::objectmodel::core::TaggedValue" = s.resourceConnection->first().taggedValue -> any(val | val.tag = 'RETRIEVE_ALL');
    }
    to t : OUTMODEL!"connection::MDMConnection" (
        __xmiID__ <- s.__xmiID__, 
    	name <- s.name,
        clientDependency <- s.clientDependency,
    	taggedValue <-  if retrieveAll = OclUndefined then s.taggedValue else s.taggedValue -> including(thisModule.createTaggedValue(retrieveAll)) endif,
		document <- s.document,
        description <- s.description,
        dataPackage <- s.dataPackage,
    	Username <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'user') ,
        Password <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'password'),
        Port <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'PORT'),
        Server <- thisModule.getTaggedValueValue(s.resourceConnection->first(), 'HOST')
		)
}

rule createTaggedValue(theTag : INMODEL!"topcwm::cwm::objectmodel::core::TaggedValue") {
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::TaggedValue" (
		__xmiID__ <- theTag.__xmiID__,
    	tag <- theTag.tag,
        value <- theTag.value)
	do{
		t;--trick to return the created instance
	}
}


--
--rule createTaggedValue(theTag : String, theValue : String, xmiId : OclAny) {
--    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::TaggedValue" (
--        tag <- theTag,
--        value <- theValue,
--		__xmiID__ <- xmiId)
--	do{
--		t;--trick to return the created instance
--	}
--}
--

rule "cwm::softwaredeployment::TdSoftwareSystem" {
    from s : INMODEL!"topcwm::softwaredeployment::TdSoftwareSystem" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::softwaredeployment::TdSoftwareSystem" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        type <- s.type,
        subtype <- s.subtype,
        supplier <- s.supplier,
        version <- s.version,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployment <- s.deployment,
        typespace <- s.typespace)
}

rule "cwm::softwaredeployment::TdMachine" {
    from s : INMODEL!"topcwm::softwaredeployment::TdMachine" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::softwaredeployment::TdMachine" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        ipAddress <- s.ipAddress,
        hostName <- s.hostName,
        machineID <- s.machineID,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        deployedComponent <- s.deployedComponent,
        site <- s.site)
}

rule "cwm::xml::TdXMLContent" {
    from s : INMODEL!"topcwm::xml::TdXMLContent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::xml::TdXmlContent" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        type <- s.type,
        occurrence <- s.occurrence,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        elementType <- s.elementType,
        ownedElementType <- s.ownedElementType,
        xmlElements <- s.xmlElements)
}

rule "cwm::xml::TdXMLDocument" {
    from s : INMODEL!"topcwm::xml::TdXMLDocument" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::xml::TdXmlSchema" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        xsdFilePath <- s.xsdFilePath,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "cwm::xml::TdXMLElement" {
    from s : INMODEL!"topcwm::xml::TdXMLElement" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::cwm::xml::TdXmlElementType" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        javaType <- s.javaType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        xsdElementDeclaration <- s.xsdElementDeclaration,
        ownedDocument <- s.ownedDocument,
        xmlContent <- s.xmlContent)
}


-- rules to copy CWM classes serialized by TOP

rule "orgomg::cwm::foundation::softwaredeployment::Component" {
    from s : INMODEL!"topcwm::cwm::foundation::softwaredeployment::Component" (
		if s.oclIsTypeOf(INMODEL!"topcwm::cwm::foundation::softwaredeployment::Component") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::Component" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        deployment <- s.deployment)
}

rule "orgomg::cwm::objectmodel::core::TaggedValue" {
    from s : INMODEL!"topcwm::cwm::objectmodel::core::TaggedValue" (thisModule.inElements->includes(s) and not(s.modelElement.oclIsTypeOf(INMODEL!"topcwm::softwaredeployment::TdProviderConnection")))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::TaggedValue" (
        __xmiID__ <- s.__xmiID__, 
        tag <- s.tag,
        value <- s.value)
}

rule "orgomg::cwm::resource::relational::PrimaryKey" {
	--removed all primary keys that are not the first one of the table	
    from s : INMODEL!"topcwm::cwm::resource::relational::PrimaryKey" (thisModule.inElements->includes(s) and s = thisModule.getFirstPK(s.namespace.ownedElement))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::PrimaryKey" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        deferrability <- s.deferrability,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        keyRelationship <- s.keyRelationship)
}

rule "orgomg::cwm::resource::relational::ForeignKey" {
    from s : INMODEL!"topcwm::cwm::resource::relational::ForeignKey" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::ForeignKey" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        deleteRule <- s.deleteRule,
        updateRule <- s.updateRule,
        deferrability <- s.deferrability,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        uniqueKey <- s.uniqueKey)
}

rule "orgomg::cwm::objectmodel::core::Dependency" {
    from s : INMODEL!"topcwm::cwm::objectmodel::core::Dependency" (
		if s.oclIsTypeOf(INMODEL!"topcwm::cwm::objectmodel::core::Dependency") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Dependency" (
        __xmiID__ <- s.__xmiID__, 
        name <- s.name,
        visibility <- s.visibility,
        kind <- s.kind,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        client <- s.client,
        supplier <- s.supplier)
}
