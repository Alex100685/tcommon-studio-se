-- @atlcompiler atl2006
-- Generated by: $Id$
module EModelCopy;

create OUT : OUTMODEL from IN : INMODEL;

helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

helper context OclAny def : isInElement : Boolean =
	thisModule.inElements->includes(self);

rule "orgomg::cwm::objectmodel::core::Class" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Class" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::Class") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Class" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index)
}

rule "orgomg::cwm::objectmodel::core::DataType" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::DataType" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::DataType") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::DataType" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension)
}

rule "orgomg::cwm::objectmodel::core::Package" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Package" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::Package") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Package" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::objectmodel::core::Subsystem" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Subsystem" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::Subsystem") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Subsystem" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::objectmodel::core::Model" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Model" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::Model") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Model" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::objectmodel::core::Attribute" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Attribute" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::Attribute") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Attribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue)
}

rule "orgomg::cwm::objectmodel::core::Constraint" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Constraint" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::Constraint") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Constraint" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        body <- s.body,
        constrainedElement <- s.constrainedElement)
}

rule "orgomg::cwm::objectmodel::core::Dependency" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Dependency" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::Dependency") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Dependency" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        kind <- s.kind,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        client <- s.client,
        supplier <- s.supplier)
}

rule "orgomg::cwm::objectmodel::core::Expression" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Expression" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::Expression") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Expression" (
        __xmiID__ <- s.__xmiID__,
        body <- s.body,
        language <- s.language,
        version <- s.version)
}

rule "orgomg::cwm::objectmodel::core::BooleanExpression" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::BooleanExpression" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::BooleanExpression" (
        __xmiID__ <- s.__xmiID__,
        body <- s.body,
        language <- s.language,
        version <- s.version)
}

rule "orgomg::cwm::objectmodel::core::ProcedureExpression" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::ProcedureExpression" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::core::ProcedureExpression") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::ProcedureExpression" (
        __xmiID__ <- s.__xmiID__,
        body <- s.body,
        language <- s.language,
        version <- s.version)
}

rule "orgomg::cwm::objectmodel::core::Multiplicity" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::Multiplicity" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::Multiplicity" (
        __xmiID__ <- s.__xmiID__,
        range <- s.range)
}

rule "orgomg::cwm::objectmodel::core::MultiplicityRange" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::MultiplicityRange" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::MultiplicityRange" (
        __xmiID__ <- s.__xmiID__,
        lower <- s.lower,
        upper <- s.upper)
}

rule "orgomg::cwm::objectmodel::core::TaggedValue" {
    from s : INMODEL!"orgomg::cwm::objectmodel::core::TaggedValue" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::core::TaggedValue" (
        __xmiID__ <- s.__xmiID__,
        tag <- s.tag,
        value <- s.value)
}

rule "orgomg::cwm::objectmodel::behavioral::Argument" {
    from s : INMODEL!"orgomg::cwm::objectmodel::behavioral::Argument" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::behavioral::Argument" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        value <- s.value)
}

rule "orgomg::cwm::objectmodel::behavioral::CallAction" {
    from s : INMODEL!"orgomg::cwm::objectmodel::behavioral::CallAction" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::behavioral::CallAction" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        actualArgument <- s.actualArgument,
        operation <- s.operation,
        stepExecution <- s.stepExecution)
}

rule "orgomg::cwm::objectmodel::behavioral::Event" {
    from s : INMODEL!"orgomg::cwm::objectmodel::behavioral::Event" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::behavioral::Event" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter)
}

rule "orgomg::cwm::objectmodel::behavioral::Interface" {
    from s : INMODEL!"orgomg::cwm::objectmodel::behavioral::Interface" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::behavioral::Interface" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension)
}

rule "orgomg::cwm::objectmodel::behavioral::Method" {
    from s : INMODEL!"orgomg::cwm::objectmodel::behavioral::Method" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::behavioral::Method") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::behavioral::Method" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        isQuery <- s.isQuery,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        parameter <- s.parameter,
        body <- s.body,
        specification <- s.specification)
}

rule "orgomg::cwm::objectmodel::behavioral::Operation" {
    from s : INMODEL!"orgomg::cwm::objectmodel::behavioral::Operation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::behavioral::Operation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        isQuery <- s.isQuery,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        parameter <- s.parameter,
        callAction <- s.callAction,
        method <- s.method)
}

rule "orgomg::cwm::objectmodel::behavioral::Parameter" {
    from s : INMODEL!"orgomg::cwm::objectmodel::behavioral::Parameter" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::behavioral::Parameter") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::behavioral::Parameter" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        kind <- s.kind,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        defaultValue <- s.defaultValue,
        type <- s.type)
}

rule "orgomg::cwm::objectmodel::relationships::Association" {
    from s : INMODEL!"orgomg::cwm::objectmodel::relationships::Association" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::relationships::Association") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::relationships::Association" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index)
}

rule "orgomg::cwm::objectmodel::relationships::AssociationEnd" {
    from s : INMODEL!"orgomg::cwm::objectmodel::relationships::AssociationEnd" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::relationships::AssociationEnd") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::relationships::AssociationEnd" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        aggregation <- s.aggregation,
        isNavigable <- s.isNavigable,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap)
}

rule "orgomg::cwm::objectmodel::relationships::Generalization" {
    from s : INMODEL!"orgomg::cwm::objectmodel::relationships::Generalization" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::relationships::Generalization" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        child <- s.child,
        parent <- s.parent)
}

rule "orgomg::cwm::objectmodel::instance::Slot" {
    from s : INMODEL!"orgomg::cwm::objectmodel::instance::Slot" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::objectmodel::instance::Slot" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        value <- s.value,
        feature <- s.feature)
}

rule "orgomg::cwm::objectmodel::instance::DataValue" {
    from s : INMODEL!"orgomg::cwm::objectmodel::instance::DataValue" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::instance::DataValue") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::instance::DataValue" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        value <- s.value,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier)
}

rule "orgomg::cwm::objectmodel::instance::Object" {
    from s : INMODEL!"orgomg::cwm::objectmodel::instance::Object" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::instance::Object") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::instance::Object" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier,
        slot <- s.slot)
}

rule "orgomg::cwm::objectmodel::instance::Extent" {
    from s : INMODEL!"orgomg::cwm::objectmodel::instance::Extent" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::objectmodel::instance::Extent") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::objectmodel::instance::Extent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::foundation::businessinformation::ResponsibleParty" {
    from s : INMODEL!"orgomg::cwm::foundation::businessinformation::ResponsibleParty" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::businessinformation::ResponsibleParty" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        responsibility <- s.responsibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        modelElement <- s.modelElement)
}

rule "orgomg::cwm::foundation::businessinformation::Telephone" {
    from s : INMODEL!"orgomg::cwm::foundation::businessinformation::Telephone" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::businessinformation::Telephone" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        phoneNumber <- s.phoneNumber,
        phoneType <- s.phoneType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        contact <- s.contact)
}

rule "orgomg::cwm::foundation::businessinformation::Email" {
    from s : INMODEL!"orgomg::cwm::foundation::businessinformation::Email" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::businessinformation::Email" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        emailAddress <- s.emailAddress,
        emailType <- s.emailType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        contact <- s.contact)
}

rule "orgomg::cwm::foundation::businessinformation::Location" {
    from s : INMODEL!"orgomg::cwm::foundation::businessinformation::Location" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::businessinformation::Location") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::businessinformation::Location" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        locationType <- s.locationType,
        address <- s.address,
        city <- s.city,
        postCode <- s.postCode,
        area <- s.area,
        country <- s.country,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        contact <- s.contact)
}

rule "orgomg::cwm::foundation::businessinformation::Contact" {
    from s : INMODEL!"orgomg::cwm::foundation::businessinformation::Contact" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::businessinformation::Contact" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        email <- s.email,
        location <- s.location,
        url <- s.url,
        telephone <- s.telephone)
}

rule "orgomg::cwm::foundation::businessinformation::Description" {
    from s : INMODEL!"orgomg::cwm::foundation::businessinformation::Description" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::businessinformation::Description") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::businessinformation::Description" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        body <- s.body,
        language <- s.language,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        modelElement <- s.modelElement)
}

rule "orgomg::cwm::foundation::businessinformation::Document" {
    from s : INMODEL!"orgomg::cwm::foundation::businessinformation::Document" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::businessinformation::Document" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        reference <- s.reference,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        modelElement <- s.modelElement)
}

rule "orgomg::cwm::foundation::businessinformation::ResourceLocator" {
    from s : INMODEL!"orgomg::cwm::foundation::businessinformation::ResourceLocator" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::businessinformation::ResourceLocator" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        url <- s.url,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        contact <- s.contact)
}

rule "orgomg::cwm::foundation::datatypes::Enumeration" {
    from s : INMODEL!"orgomg::cwm::foundation::datatypes::Enumeration" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::datatypes::Enumeration" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isOrdered <- s.isOrdered,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        literal <- s.literal)
}

rule "orgomg::cwm::foundation::datatypes::EnumerationLiteral" {
    from s : INMODEL!"orgomg::cwm::foundation::datatypes::EnumerationLiteral" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::datatypes::EnumerationLiteral" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        value <- s.value)
}

rule "orgomg::cwm::foundation::datatypes::QueryExpression" {
    from s : INMODEL!"orgomg::cwm::foundation::datatypes::QueryExpression" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::datatypes::QueryExpression" (
        __xmiID__ <- s.__xmiID__,
        body <- s.body,
        language <- s.language,
        version <- s.version,
        reportGroup <- s.reportGroup)
}

rule "orgomg::cwm::foundation::datatypes::TypeAlias" {
    from s : INMODEL!"orgomg::cwm::foundation::datatypes::TypeAlias" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::datatypes::TypeAlias") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::datatypes::TypeAlias" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        type <- s.type)
}

rule "orgomg::cwm::foundation::datatypes::Union" {
    from s : INMODEL!"orgomg::cwm::foundation::datatypes::Union" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::datatypes::Union" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        discriminator <- s.discriminator)
}

rule "orgomg::cwm::foundation::datatypes::UnionMember" {
    from s : INMODEL!"orgomg::cwm::foundation::datatypes::UnionMember" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::datatypes::UnionMember" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        isDefault <- s.isDefault,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        memberCase <- s.memberCase)
}

rule "orgomg::cwm::foundation::expressions::ExpressionNode" {
    from s : INMODEL!"orgomg::cwm::foundation::expressions::ExpressionNode" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::expressions::ExpressionNode") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::expressions::ExpressionNode" (
        __xmiID__ <- s.__xmiID__,
        expression <- s.expression,
        type <- s.type)
}

rule "orgomg::cwm::foundation::expressions::ConstantNode" {
    from s : INMODEL!"orgomg::cwm::foundation::expressions::ConstantNode" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::expressions::ConstantNode" (
        __xmiID__ <- s.__xmiID__,
        value <- s.value,
        expression <- s.expression,
        type <- s.type)
}

rule "orgomg::cwm::foundation::expressions::ElementNode" {
    from s : INMODEL!"orgomg::cwm::foundation::expressions::ElementNode" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::expressions::ElementNode" (
        __xmiID__ <- s.__xmiID__,
        expression <- s.expression,
        type <- s.type,
        modelElement <- s.modelElement)
}

rule "orgomg::cwm::foundation::expressions::FeatureNode" {
    from s : INMODEL!"orgomg::cwm::foundation::expressions::FeatureNode" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::expressions::FeatureNode" (
        __xmiID__ <- s.__xmiID__,
        expression <- s.expression,
        type <- s.type,
        feature <- s.feature,
        argument <- s.argument)
}

rule "orgomg::cwm::foundation::keysindexes::UniqueKey" {
    from s : INMODEL!"orgomg::cwm::foundation::keysindexes::UniqueKey" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::keysindexes::UniqueKey") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::keysindexes::UniqueKey" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        keyRelationship <- s.keyRelationship)
}

rule "orgomg::cwm::foundation::keysindexes::Index" {
    from s : INMODEL!"orgomg::cwm::foundation::keysindexes::Index" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::keysindexes::Index") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::keysindexes::Index" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isPartitioning <- s.isPartitioning,
        isSorted <- s.isSorted,
        isUnique <- s.isUnique,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        indexedFeature <- s.indexedFeature,
        spannedClass <- s.spannedClass)
}

rule "orgomg::cwm::foundation::keysindexes::KeyRelationship" {
    from s : INMODEL!"orgomg::cwm::foundation::keysindexes::KeyRelationship" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::keysindexes::KeyRelationship") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::keysindexes::KeyRelationship" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        uniqueKey <- s.uniqueKey)
}

rule "orgomg::cwm::foundation::keysindexes::IndexedFeature" {
    from s : INMODEL!"orgomg::cwm::foundation::keysindexes::IndexedFeature" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::keysindexes::IndexedFeature") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::keysindexes::IndexedFeature" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAscending <- s.isAscending,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature)
}

rule "orgomg::cwm::foundation::softwaredeployment::Site" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::Site" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::Site" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        locationType <- s.locationType,
        address <- s.address,
        city <- s.city,
        postCode <- s.postCode,
        area <- s.area,
        country <- s.country,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        contact <- s.contact,
        containingSite <- s.containingSite,
        containedSite <- s.containedSite,
        machine <- s.machine)
}

rule "orgomg::cwm::foundation::softwaredeployment::Machine" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::Machine" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::Machine" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ipAddress <- s.ipAddress,
        hostName <- s.hostName,
        machineID <- s.machineID,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        deployedComponent <- s.deployedComponent,
        site <- s.site)
}

rule "orgomg::cwm::foundation::softwaredeployment::SoftwareSystem" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::SoftwareSystem" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::SoftwareSystem" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        type <- s.type,
        subtype <- s.subtype,
        supplier <- s.supplier,
        version <- s.version,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployment <- s.deployment,
        typespace <- s.typespace)
}

rule "orgomg::cwm::foundation::softwaredeployment::DeployedComponent" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::DeployedComponent" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::softwaredeployment::DeployedComponent") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::DeployedComponent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        pathname <- s.pathname,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployedSoftwareSystem <- s.deployedSoftwareSystem,
        component <- s.component)
}

rule "orgomg::cwm::foundation::softwaredeployment::DeployedSoftwareSystem" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::DeployedSoftwareSystem" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::DeployedSoftwareSystem" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        softwareSystem <- s.softwareSystem,
        deployedComponent <- s.deployedComponent)
}

rule "orgomg::cwm::foundation::softwaredeployment::DataManager" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::DataManager" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::softwaredeployment::DataManager") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::DataManager" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        pathname <- s.pathname,
        isCaseSensitive <- s.isCaseSensitive,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployedSoftwareSystem <- s.deployedSoftwareSystem,
        component <- s.component,
        clientConnection <- s.clientConnection,
        dataPackage <- s.dataPackage)
}

rule "orgomg::cwm::foundation::softwaredeployment::DataProvider" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::DataProvider" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::DataProvider" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        pathname <- s.pathname,
        isCaseSensitive <- s.isCaseSensitive,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployedSoftwareSystem <- s.deployedSoftwareSystem,
        component <- s.component,
        clientConnection <- s.clientConnection,
        dataPackage <- s.dataPackage,
        resourceConnection <- s.resourceConnection)
}

rule "orgomg::cwm::foundation::softwaredeployment::ProviderConnection" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::ProviderConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::ProviderConnection" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isReadOnly <- s.isReadOnly,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::foundation::softwaredeployment::Component" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::Component" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::foundation::softwaredeployment::Component") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::Component" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        deployment <- s.deployment)
}

rule "orgomg::cwm::foundation::softwaredeployment::PackageUsage" {
    from s : INMODEL!"orgomg::cwm::foundation::softwaredeployment::PackageUsage" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::softwaredeployment::PackageUsage" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        kind <- s.kind,
        packageAlias <- s.packageAlias,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        client <- s.client,
        supplier <- s.supplier)
}

rule "orgomg::cwm::foundation::typemapping::TypeMapping" {
    from s : INMODEL!"orgomg::cwm::foundation::typemapping::TypeMapping" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::typemapping::TypeMapping" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isBestMatch <- s.isBestMatch,
        isLossy <- s.isLossy,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        sourceType <- s.sourceType,
        targetType <- s.targetType)
}

rule "orgomg::cwm::foundation::typemapping::TypeSystem" {
    from s : INMODEL!"orgomg::cwm::foundation::typemapping::TypeSystem" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::foundation::typemapping::TypeSystem" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        version <- s.version,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        supportingSystem <- s.supportingSystem)
}

rule "orgomg::cwm::resource::relational::Catalog" {
    from s : INMODEL!"orgomg::cwm::resource::relational::Catalog" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Catalog" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        defaultCharacterSetName <- s.defaultCharacterSetName,
        defaultCollationName <- s.defaultCollationName,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::resource::relational::Schema" {
    from s : INMODEL!"orgomg::cwm::resource::relational::Schema" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Schema" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::resource::relational::ColumnSet" {
    from s : INMODEL!"orgomg::cwm::resource::relational::ColumnSet" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::relational::ColumnSet") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::relational::ColumnSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index)
}

rule "orgomg::cwm::resource::relational::NamedColumnSet" {
    from s : INMODEL!"orgomg::cwm::resource::relational::NamedColumnSet" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::relational::NamedColumnSet") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::relational::NamedColumnSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        usingTrigger <- s.usingTrigger,
        type <- s.type,
        optionScopeColumn <- s.optionScopeColumn)
}

rule "orgomg::cwm::resource::relational::Table" {
    from s : INMODEL!"orgomg::cwm::resource::relational::Table" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Table" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isTemporary <- s.isTemporary,
        temporaryScope <- s.temporaryScope,
        isSystem <- s.isSystem,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        usingTrigger <- s.usingTrigger,
        type <- s.type,
        optionScopeColumn <- s.optionScopeColumn,
        trigger <- s.trigger)
}

rule "orgomg::cwm::resource::relational::View" {
    from s : INMODEL!"orgomg::cwm::resource::relational::View" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::View" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isReadOnly <- s.isReadOnly,
        checkOption <- s.checkOption,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        usingTrigger <- s.usingTrigger,
        type <- s.type,
        optionScopeColumn <- s.optionScopeColumn,
        queryExpression <- s.queryExpression)
}

rule "orgomg::cwm::resource::relational::QueryColumnSet" {
    from s : INMODEL!"orgomg::cwm::resource::relational::QueryColumnSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::QueryColumnSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        "query" <- s."query")
}

rule "orgomg::cwm::resource::relational::SQLDistinctType" {
    from s : INMODEL!"orgomg::cwm::resource::relational::SQLDistinctType" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::SQLDistinctType" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        typeNumber <- s.typeNumber,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        type <- s.type,
        sqlSimpleType <- s.sqlSimpleType)
}

rule "orgomg::cwm::resource::relational::SQLSimpleType" {
    from s : INMODEL!"orgomg::cwm::resource::relational::SQLSimpleType" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::SQLSimpleType" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        typeNumber <- s.typeNumber,
        characterMaximumLength <- s.characterMaximumLength,
        characterOctetLength <- s.characterOctetLength,
        numericPrecision <- s.numericPrecision,
        numericPrecisionRadix <- s.numericPrecisionRadix,
        numericScale <- s.numericScale,
        dateTimePrecision <- s.dateTimePrecision,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        sqlDistinctType <- s.sqlDistinctType)
}

rule "orgomg::cwm::resource::relational::SQLStructuredType" {
    from s : INMODEL!"orgomg::cwm::resource::relational::SQLStructuredType" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::SQLStructuredType" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        typeNumber <- s.typeNumber,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        columnSet <- s.columnSet,
        referencingColumn <- s.referencingColumn)
}

rule "orgomg::cwm::resource::relational::Column" {
    from s : INMODEL!"orgomg::cwm::resource::relational::Column" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Column" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        precision <- s.precision,
        scale <- s.scale,
        isNullable <- s.isNullable,
        length <- s.length,
        collationName <- s.collationName,
        characterSetName <- s.characterSetName,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        referencedTableType <- s.referencedTableType,
        optionScopeColumnSet <- s.optionScopeColumnSet)
}

rule "orgomg::cwm::resource::relational::Procedure" {
    from s : INMODEL!"orgomg::cwm::resource::relational::Procedure" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Procedure" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        isQuery <- s.isQuery,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        parameter <- s.parameter,
        body <- s.body,
        specification <- s.specification)
}

rule "orgomg::cwm::resource::relational::Trigger" {
    from s : INMODEL!"orgomg::cwm::resource::relational::Trigger" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Trigger" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        eventManipulation <- s.eventManipulation,
        actionOrientation <- s.actionOrientation,
        conditionTiming <- s.conditionTiming,
        conditionReferenceNewTable <- s.conditionReferenceNewTable,
        conditionReferenceOldTable <- s.conditionReferenceOldTable,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        actionCondition <- s.actionCondition,
        actionStatement <- s.actionStatement,
        usedColumnSet <- s.usedColumnSet,
        table <- s.table)
}

rule "orgomg::cwm::resource::relational::SQLIndex" {
    from s : INMODEL!"orgomg::cwm::resource::relational::SQLIndex" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::SQLIndex" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isPartitioning <- s.isPartitioning,
        isSorted <- s.isSorted,
        isUnique <- s.isUnique,
        filterCondition <- s.filterCondition,
        isNullable <- s.isNullable,
        autoUpdate <- s.autoUpdate,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        indexedFeature <- s.indexedFeature,
        spannedClass <- s.spannedClass)
}

rule "orgomg::cwm::resource::relational::UniqueConstraint" {
    from s : INMODEL!"orgomg::cwm::resource::relational::UniqueConstraint" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::relational::UniqueConstraint") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::relational::UniqueConstraint" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        deferrability <- s.deferrability,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        keyRelationship <- s.keyRelationship)
}

rule "orgomg::cwm::resource::relational::ForeignKey" {
    from s : INMODEL!"orgomg::cwm::resource::relational::ForeignKey" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::ForeignKey" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        deleteRule <- s.deleteRule,
        updateRule <- s.updateRule,
        deferrability <- s.deferrability,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        uniqueKey <- s.uniqueKey)
}

rule "orgomg::cwm::resource::relational::SQLIndexColumn" {
    from s : INMODEL!"orgomg::cwm::resource::relational::SQLIndexColumn" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::SQLIndexColumn" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAscending <- s.isAscending,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature)
}

rule "orgomg::cwm::resource::relational::PrimaryKey" {
    from s : INMODEL!"orgomg::cwm::resource::relational::PrimaryKey" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::PrimaryKey" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        deferrability <- s.deferrability,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        keyRelationship <- s.keyRelationship)
}

rule "orgomg::cwm::resource::relational::Row" {
    from s : INMODEL!"orgomg::cwm::resource::relational::Row" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::Row" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier,
        slot <- s.slot)
}

rule "orgomg::cwm::resource::relational::ColumnValue" {
    from s : INMODEL!"orgomg::cwm::resource::relational::ColumnValue" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::ColumnValue" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        value <- s.value,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier)
}

rule "orgomg::cwm::resource::relational::CheckConstraint" {
    from s : INMODEL!"orgomg::cwm::resource::relational::CheckConstraint" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::CheckConstraint" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        deferrability <- s.deferrability,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        body <- s.body,
        constrainedElement <- s.constrainedElement)
}

rule "orgomg::cwm::resource::relational::RowSet" {
    from s : INMODEL!"orgomg::cwm::resource::relational::RowSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::RowSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::resource::relational::SQLParameter" {
    from s : INMODEL!"orgomg::cwm::resource::relational::SQLParameter" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::relational::SQLParameter" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        kind <- s.kind,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        defaultValue <- s.defaultValue,
        type <- s.type)
}

rule "orgomg::cwm::resource::record::Field" {
    from s : INMODEL!"orgomg::cwm::resource::record::Field" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::record::Field") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::record::Field" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue)
}

rule "orgomg::cwm::resource::record::RecordDef" {
    from s : INMODEL!"orgomg::cwm::resource::record::RecordDef" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::record::RecordDef") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::record::RecordDef" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        fieldDelimiter <- s.fieldDelimiter,
        isFixedWidth <- s.isFixedWidth,
        textDelimiter <- s.textDelimiter,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        file <- s.file,
        section <- s.section)
}

rule "orgomg::cwm::resource::record::FixedOffsetField" {
    from s : INMODEL!"orgomg::cwm::resource::record::FixedOffsetField" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::record::FixedOffsetField") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::record::FixedOffsetField" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        offset <- s.offset,
        offsetUnitBits <- s.offsetUnitBits,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue)
}

rule "orgomg::cwm::resource::record::RecordFile" {
    from s : INMODEL!"orgomg::cwm::resource::record::RecordFile" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::record::RecordFile") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::record::RecordFile" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isSelfDescribing <- s.isSelfDescribing,
        recordDelimiter <- s.recordDelimiter,
        skipRecords <- s.skipRecords,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        record <- s.record)
}

rule "orgomg::cwm::resource::record::FieldValue" {
    from s : INMODEL!"orgomg::cwm::resource::record::FieldValue" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::record::FieldValue" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        value <- s.value,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier)
}

rule "orgomg::cwm::resource::record::Record" {
    from s : INMODEL!"orgomg::cwm::resource::record::Record" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::record::Record" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier,
        slot <- s.slot)
}

rule "orgomg::cwm::resource::record::RecordSet" {
    from s : INMODEL!"orgomg::cwm::resource::record::RecordSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::record::RecordSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::resource::record::Group" {
    from s : INMODEL!"orgomg::cwm::resource::record::Group" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::record::Group" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension)
}

rule "orgomg::cwm::resource::multidimensional::Dimension" {
    from s : INMODEL!"orgomg::cwm::resource::multidimensional::Dimension" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::multidimensional::Dimension") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::multidimensional::Dimension" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        dimensionedObject <- s.dimensionedObject,
        composite <- s.composite,
        component <- s.component,
        memberSet <- s.memberSet)
}

rule "orgomg::cwm::resource::multidimensional::DimensionedObject" {
    from s : INMODEL!"orgomg::cwm::resource::multidimensional::DimensionedObject" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::multidimensional::DimensionedObject") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::multidimensional::DimensionedObject" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwm::resource::multidimensional::Member" {
    from s : INMODEL!"orgomg::cwm::resource::multidimensional::Member" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::multidimensional::Member" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier,
        slot <- s.slot)
}

rule "orgomg::cwm::resource::multidimensional::MemberSet" {
    from s : INMODEL!"orgomg::cwm::resource::multidimensional::MemberSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::multidimensional::MemberSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::resource::multidimensional::MemberValue" {
    from s : INMODEL!"orgomg::cwm::resource::multidimensional::MemberValue" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::multidimensional::MemberValue" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        value <- s.value,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier)
}

rule "orgomg::cwm::resource::multidimensional::Schema" {
    from s : INMODEL!"orgomg::cwm::resource::multidimensional::Schema" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::multidimensional::Schema") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::multidimensional::Schema" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        dimensionedObject <- s.dimensionedObject,
        dimension <- s.dimension)
}

rule "orgomg::cwm::resource::xml::Schema" {
    from s : INMODEL!"orgomg::cwm::resource::xml::Schema" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::Schema" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        version <- s.version,
        xmlNamespace <- s.xmlNamespace,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::resource::xml::ElementType" {
    from s : INMODEL!"orgomg::cwm::resource::xml::ElementType" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::ElementType" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        content <- s.content)
}

rule "orgomg::cwm::resource::xml::Attribute" {
    from s : INMODEL!"orgomg::cwm::resource::xml::Attribute" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::Attribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        defaultKind <- s.defaultKind,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue)
}

rule "orgomg::cwm::resource::xml::Content" {
    from s : INMODEL!"orgomg::cwm::resource::xml::Content" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::resource::xml::Content") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::resource::xml::Content" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        type <- s.type,
        occurrence <- s.occurrence,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        elementType <- s.elementType,
        ownedElementType <- s.ownedElementType)
}

rule "orgomg::cwm::resource::xml::ElementContent" {
    from s : INMODEL!"orgomg::cwm::resource::xml::ElementContent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::ElementContent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        type <- s.type,
        occurrence <- s.occurrence,
        order <- s.order,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        elementType <- s.elementType,
        ownedElementType <- s.ownedElementType,
        ownerContent <- s.ownerContent,
        ownedContent <- s.ownedContent)
}

rule "orgomg::cwm::resource::xml::MixedContent" {
    from s : INMODEL!"orgomg::cwm::resource::xml::MixedContent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::MixedContent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        type <- s.type,
        occurrence <- s.occurrence,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        elementType <- s.elementType,
        ownedElementType <- s.ownedElementType,
        text <- s.text)
}

rule "orgomg::cwm::resource::xml::ElementTypeReference" {
    from s : INMODEL!"orgomg::cwm::resource::xml::ElementTypeReference" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::ElementTypeReference" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        occurrence <- s.occurrence,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        ownerContent <- s.ownerContent)
}

rule "orgomg::cwm::resource::xml::Text" {
    from s : INMODEL!"orgomg::cwm::resource::xml::Text" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::Text" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue)
}

rule "orgomg::cwm::resource::xml::Element" {
    from s : INMODEL!"orgomg::cwm::resource::xml::Element" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::Element" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier,
        slot <- s.slot)
}

rule "orgomg::cwm::resource::xml::Document" {
    from s : INMODEL!"orgomg::cwm::resource::xml::Document" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::resource::xml::Document" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::analysis::transformation::Transformation" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::Transformation" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::transformation::Transformation") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::Transformation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        isPrimary <- s.isPrimary,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        function <- s.function,
        source <- s.source,
        target <- s.target,
        task <- s.task)
}

rule "orgomg::cwm::analysis::transformation::DataObjectSet" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::DataObjectSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::DataObjectSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        sourceTransformation <- s.sourceTransformation,
        targetTransformation <- s.targetTransformation,
        element <- s.element)
}

rule "orgomg::cwm::analysis::transformation::TransformationTask" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::TransformationTask" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::TransformationTask" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        deployment <- s.deployment,
        step <- s.step,
        originalTask <- s.originalTask,
        inverseTask <- s.inverseTask,
        transformation <- s.transformation)
}

rule "orgomg::cwm::analysis::transformation::TransformationStep" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::TransformationStep" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::TransformationStep" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        task <- s.task,
        warehouseStep <- s.warehouseStep,
        execution <- s.execution)
}

rule "orgomg::cwm::analysis::transformation::TransformationActivity" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::TransformationActivity" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::TransformationActivity" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        creationDate <- s.creationDate,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        warehouseActivity <- s.warehouseActivity,
        execution <- s.execution)
}

rule "orgomg::cwm::analysis::transformation::PrecedenceConstraint" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::PrecedenceConstraint" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::PrecedenceConstraint" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        body <- s.body,
        constrainedElement <- s.constrainedElement)
}

rule "orgomg::cwm::analysis::transformation::TransformationUse" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::TransformationUse" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::TransformationUse" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        kind <- s.kind,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        client <- s.client,
        supplier <- s.supplier)
}

rule "orgomg::cwm::analysis::transformation::TransformationMap" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::TransformationMap" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::transformation::TransformationMap") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::TransformationMap" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        isPrimary <- s.isPrimary,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        function <- s.function,
        source <- s.source,
        target <- s.target,
        task <- s.task)
}

rule "orgomg::cwm::analysis::transformation::TransformationTree" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::TransformationTree" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::TransformationTree" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        isPrimary <- s.isPrimary,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        function <- s.function,
        source <- s.source,
        target <- s.target,
        task <- s.task,
        body <- s.body)
}

rule "orgomg::cwm::analysis::transformation::ClassifierMap" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::ClassifierMap" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::ClassifierMap" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        function <- s.function,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        source <- s.source)
}

rule "orgomg::cwm::analysis::transformation::FeatureMap" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::FeatureMap" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::FeatureMap" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        function <- s.function,
        target <- s.target)
}

rule "orgomg::cwm::analysis::transformation::StepPrecedence" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::StepPrecedence" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::StepPrecedence" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        kind <- s.kind,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        client <- s.client,
        supplier <- s.supplier)
}

rule "orgomg::cwm::analysis::transformation::ClassifierFeatureMap" {
    from s : INMODEL!"orgomg::cwm::analysis::transformation::ClassifierFeatureMap" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::transformation::ClassifierFeatureMap" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        classifierToFeature <- s.classifierToFeature,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        function <- s.function,
        classifier <- s.classifier,
        feature <- s.feature)
}

rule "orgomg::cwm::analysis::olap::ContentMap" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::ContentMap" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::ContentMap" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        isPrimary <- s.isPrimary,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        function <- s.function,
        source <- s.source,
        target <- s.target,
        task <- s.task)
}

rule "orgomg::cwm::analysis::olap::Cube" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::Cube" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::olap::Cube") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::Cube" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isVirtual <- s.isVirtual,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        cubeDimensionAssociation <- s.cubeDimensionAssociation,
        cubeRegion <- s.cubeRegion)
}

rule "orgomg::cwm::analysis::olap::CubeDeployment" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::CubeDeployment" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::CubeDeployment" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        deploymentGroup <- s.deploymentGroup,
        contentMap <- s.contentMap)
}

rule "orgomg::cwm::analysis::olap::CubeDimensionAssociation" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::CubeDimensionAssociation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::CubeDimensionAssociation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        dimension <- s.dimension,
        calcHierarchy <- s.calcHierarchy)
}

rule "orgomg::cwm::analysis::olap::CubeRegion" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::CubeRegion" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::olap::CubeRegion") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::CubeRegion" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isReadOnly <- s.isReadOnly,
        isFullyRealized <- s.isFullyRealized,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelectionGroup <- s.memberSelectionGroup,
        cubeDeployment <- s.cubeDeployment)
}

rule "orgomg::cwm::analysis::olap::DeploymentGroup" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::DeploymentGroup" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::DeploymentGroup" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        cubeDeployment <- s.cubeDeployment,
        dimensionDeployment <- s.dimensionDeployment)
}

rule "orgomg::cwm::analysis::olap::Dimension" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::Dimension" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::Dimension" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isTime <- s.isTime,
        isMeasure <- s.isMeasure,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelection <- s.memberSelection,
        cubeDimensionAssociation <- s.cubeDimensionAssociation,
        hierarchy <- s.hierarchy,
        displayDefault <- s.displayDefault)
}

rule "orgomg::cwm::analysis::olap::DimensionDeployment" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::DimensionDeployment" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::DimensionDeployment" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        structureMap <- s.structureMap,
        listOfValues <- s.listOfValues,
        immediateParent <- s.immediateParent,
        deploymentGroup <- s.deploymentGroup)
}

rule "orgomg::cwm::analysis::olap::HierarchyLevelAssociation" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::HierarchyLevelAssociation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::HierarchyLevelAssociation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        currentLevel <- s.currentLevel,
        dimensionDeployment <- s.dimensionDeployment)
}

rule "orgomg::cwm::analysis::olap::LevelBasedHierarchy" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::LevelBasedHierarchy" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::LevelBasedHierarchy" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        defaultedDimension <- s.defaultedDimension,
        cubeDimensionAssociation <- s.cubeDimensionAssociation,
        hierarchyLevelAssociation <- s.hierarchyLevelAssociation)
}

rule "orgomg::cwm::analysis::olap::MemberSelectionGroup" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::MemberSelectionGroup" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::MemberSelectionGroup" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelection <- s.memberSelection)
}

rule "orgomg::cwm::analysis::olap::MemberSelection" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::MemberSelection" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::olap::MemberSelection") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::MemberSelection" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelectionGroup <- s.memberSelectionGroup)
}

rule "orgomg::cwm::analysis::olap::Schema" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::Schema" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::olap::Schema") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::Schema" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        cube <- s.cube,
        dimension <- s.dimension,
        deploymentGroup <- s.deploymentGroup)
}

rule "orgomg::cwm::analysis::olap::ValueBasedHierarchy" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::ValueBasedHierarchy" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::ValueBasedHierarchy" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        defaultedDimension <- s.defaultedDimension,
        cubeDimensionAssociation <- s.cubeDimensionAssociation,
        dimensionDeployment <- s.dimensionDeployment)
}

rule "orgomg::cwm::analysis::olap::Level" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::Level" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::olap::Level") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::Level" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelectionGroup <- s.memberSelectionGroup,
        hierarchyLevelAssociation <- s.hierarchyLevelAssociation)
}

rule "orgomg::cwm::analysis::olap::CodedLevel" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::CodedLevel" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::CodedLevel" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelectionGroup <- s.memberSelectionGroup,
        hierarchyLevelAssociation <- s.hierarchyLevelAssociation,
        encoding <- s.encoding)
}

rule "orgomg::cwm::analysis::olap::Measure" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::Measure" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::Measure" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue)
}

rule "orgomg::cwm::analysis::olap::StructureMap" {
    from s : INMODEL!"orgomg::cwm::analysis::olap::StructureMap" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::olap::StructureMap" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        isPrimary <- s.isPrimary,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        function <- s.function,
        source <- s.source,
        target <- s.target,
        task <- s.task,
        dimensionDeploymentLV <- s.dimensionDeploymentLV,
        dimensionDeploymentIP <- s.dimensionDeploymentIP)
}

rule "orgomg::cwm::analysis::datamining::ApplicationInputSpecification" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::ApplicationInputSpecification" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::ApplicationInputSpecification" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        inputAttribute <- s.inputAttribute)
}

rule "orgomg::cwm::analysis::datamining::AttributeUsageRelation" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::AttributeUsageRelation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::AttributeUsageRelation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        usageType <- s.usageType,
        includeInApplyResult <- s.includeInApplyResult,
        weight <- s.weight,
        suppressNormalization <- s.suppressNormalization,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        attribute <- s.attribute)
}

rule "orgomg::cwm::analysis::datamining::Category" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::Category" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::Category" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        displayValue <- s.displayValue,
        property <- s.property,
        value <- s.value,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwm::analysis::datamining::CategoryHierarchy" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::CategoryHierarchy" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::CategoryHierarchy" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        categoricalAttribute <- s.categoricalAttribute)
}

rule "orgomg::cwm::analysis::datamining::CostMatrix" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::CostMatrix" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::CostMatrix" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        settings <- s.settings)
}

rule "orgomg::cwm::analysis::datamining::MiningAttribute" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::MiningAttribute" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::datamining::MiningAttribute") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::MiningAttribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        attributeUsage <- s.attributeUsage,
        settings <- s.settings)
}

rule "orgomg::cwm::analysis::datamining::MiningDataSpecification" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::MiningDataSpecification" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::MiningDataSpecification" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        attribute <- s.attribute,
        settings <- s.settings)
}

rule "orgomg::cwm::analysis::datamining::MiningModel" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::MiningModel" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::datamining::MiningModel") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::MiningModel" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        settings <- s.settings,
        miningResult <- s.miningResult,
        inputSpec <- s.inputSpec)
}

rule "orgomg::cwm::analysis::datamining::MiningModelResult" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::MiningModelResult" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::MiningModelResult" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        model <- s.model)
}

rule "orgomg::cwm::analysis::datamining::NumericAttribute" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::NumericAttribute" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::NumericAttribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        isCyclic <- s.isCyclic,
        isDiscrete <- s.isDiscrete,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        attributeUsage <- s.attributeUsage,
        settings <- s.settings)
}

rule "orgomg::cwm::analysis::datamining::SupervisedMiningModel" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::SupervisedMiningModel" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::SupervisedMiningModel" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        settings <- s.settings,
        miningResult <- s.miningResult,
        inputSpec <- s.inputSpec,
        target <- s.target)
}

rule "orgomg::cwm::analysis::datamining::CategoricalAttribute" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::CategoricalAttribute" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::datamining::CategoricalAttribute") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::CategoricalAttribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        attributeUsage <- s.attributeUsage,
        settings <- s.settings,
        taxonomy <- s.taxonomy,
        category <- s.category)
}

rule "orgomg::cwm::analysis::datamining::OrdinalAttribute" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::OrdinalAttribute" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::OrdinalAttribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        isCyclic <- s.isCyclic,
        orderingType <- s.orderingType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        attributeUsage <- s.attributeUsage,
        settings <- s.settings,
        taxonomy <- s.taxonomy,
        category <- s.category)
}

rule "orgomg::cwm::analysis::datamining::MiningSettings" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::MiningSettings" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::datamining::MiningSettings") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::MiningSettings" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        miningModel <- s.miningModel,
        attributeUsage <- s.attributeUsage,
        dataSpecification <- s.dataSpecification)
}

rule "orgomg::cwm::analysis::datamining::ClusteringSettings" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::ClusteringSettings" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::ClusteringSettings" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        maxNumberOfClusters <- s.maxNumberOfClusters,
        clusterIdAttributeName <- s.clusterIdAttributeName,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        miningModel <- s.miningModel,
        attributeUsage <- s.attributeUsage,
        dataSpecification <- s.dataSpecification)
}

rule "orgomg::cwm::analysis::datamining::StatisticsSettings" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::StatisticsSettings" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::StatisticsSettings" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        miningModel <- s.miningModel,
        attributeUsage <- s.attributeUsage,
        dataSpecification <- s.dataSpecification)
}

rule "orgomg::cwm::analysis::datamining::SupervisedMiningSettings" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::SupervisedMiningSettings" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::datamining::SupervisedMiningSettings") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::SupervisedMiningSettings" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        confidenceAttributeName <- s.confidenceAttributeName,
        predictedAttributeName <- s.predictedAttributeName,
        costFunction <- s.costFunction,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        miningModel <- s.miningModel,
        attributeUsage <- s.attributeUsage,
        dataSpecification <- s.dataSpecification)
}

rule "orgomg::cwm::analysis::datamining::ClassificationSettings" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::ClassificationSettings" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::ClassificationSettings" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        confidenceAttributeName <- s.confidenceAttributeName,
        predictedAttributeName <- s.predictedAttributeName,
        costFunction <- s.costFunction,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        miningModel <- s.miningModel,
        attributeUsage <- s.attributeUsage,
        dataSpecification <- s.dataSpecification,
        costMatrix <- s.costMatrix)
}

rule "orgomg::cwm::analysis::datamining::RegressionSettings" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::RegressionSettings" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::RegressionSettings" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        confidenceAttributeName <- s.confidenceAttributeName,
        predictedAttributeName <- s.predictedAttributeName,
        costFunction <- s.costFunction,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        miningModel <- s.miningModel,
        attributeUsage <- s.attributeUsage,
        dataSpecification <- s.dataSpecification)
}

rule "orgomg::cwm::analysis::datamining::AssociationRulesSettings" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::AssociationRulesSettings" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::AssociationRulesSettings" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        function <- s.function,
        algorithm <- s.algorithm,
        minimumSupport <- s.minimumSupport,
        minimumConfidence <- s.minimumConfidence,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        miningModel <- s.miningModel,
        attributeUsage <- s.attributeUsage,
        dataSpecification <- s.dataSpecification,
        itemId <- s.itemId)
}

rule "orgomg::cwm::analysis::datamining::ApplicationAttribute" {
    from s : INMODEL!"orgomg::cwm::analysis::datamining::ApplicationAttribute" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::datamining::ApplicationAttribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        usageType <- s.usageType,
        attributeType <- s.attributeType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        supervisedMiningModel <- s.supervisedMiningModel)
}

rule "orgomg::cwm::analysis::informationvisualization::RenderedObject" {
    from s : INMODEL!"orgomg::cwm::analysis::informationvisualization::RenderedObject" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::informationvisualization::RenderedObject") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::informationvisualization::RenderedObject" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        action <- s.action,
        fileName <- s.fileName,
        type <- s.type,
        url <- s.url,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        formula <- s.formula,
        composite <- s.composite,
        component <- s.component,
        defaultRendering <- s.defaultRendering,
        modelElement <- s.modelElement,
        neighbor <- s.neighbor,
        referencingNeighbor <- s.referencingNeighbor)
}

rule "orgomg::cwm::analysis::informationvisualization::RenderedObjectSet" {
    from s : INMODEL!"orgomg::cwm::analysis::informationvisualization::RenderedObjectSet" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::informationvisualization::RenderedObjectSet") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::informationvisualization::RenderedObjectSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        rendering <- s.rendering)
}

rule "orgomg::cwm::analysis::informationvisualization::Rendering" {
    from s : INMODEL!"orgomg::cwm::analysis::informationvisualization::Rendering" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::informationvisualization::Rendering") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::informationvisualization::Rendering" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        action <- s.action,
        fileName <- s.fileName,
        type <- s.type,
        url <- s.url,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        formula <- s.formula,
        defaultedRenderedObject <- s.defaultedRenderedObject)
}

rule "orgomg::cwm::analysis::informationvisualization::XSLRendering" {
    from s : INMODEL!"orgomg::cwm::analysis::informationvisualization::XSLRendering" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::informationvisualization::XSLRendering" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        action <- s.action,
        fileName <- s.fileName,
        type <- s.type,
        url <- s.url,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        formula <- s.formula,
        defaultedRenderedObject <- s.defaultedRenderedObject)
}

rule "orgomg::cwm::analysis::businessnomenclature::VocabularyElement" {
    from s : INMODEL!"orgomg::cwm::analysis::businessnomenclature::VocabularyElement" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::businessnomenclature::VocabularyElement") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::businessnomenclature::VocabularyElement" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        definition <- s.definition,
        example <- s.example,
        usage <- s.usage,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        relatedElement <- s.relatedElement,
        element <- s.element,
        modelElement <- s.modelElement)
}

rule "orgomg::cwm::analysis::businessnomenclature::Nomenclature" {
    from s : INMODEL!"orgomg::cwm::analysis::businessnomenclature::Nomenclature" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::analysis::businessnomenclature::Nomenclature") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::analysis::businessnomenclature::Nomenclature" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        child <- s.child)
}

rule "orgomg::cwm::analysis::businessnomenclature::Taxonomy" {
    from s : INMODEL!"orgomg::cwm::analysis::businessnomenclature::Taxonomy" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::businessnomenclature::Taxonomy" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        child <- s.child,
        glossary <- s.glossary)
}

rule "orgomg::cwm::analysis::businessnomenclature::Glossary" {
    from s : INMODEL!"orgomg::cwm::analysis::businessnomenclature::Glossary" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::businessnomenclature::Glossary" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        language <- s.language,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        child <- s.child,
        taxonomy <- s.taxonomy)
}

rule "orgomg::cwm::analysis::businessnomenclature::BusinessDomain" {
    from s : INMODEL!"orgomg::cwm::analysis::businessnomenclature::BusinessDomain" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::businessnomenclature::BusinessDomain" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::analysis::businessnomenclature::Concept" {
    from s : INMODEL!"orgomg::cwm::analysis::businessnomenclature::Concept" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::businessnomenclature::Concept" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        definition <- s.definition,
        example <- s.example,
        usage <- s.usage,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        relatedElement <- s.relatedElement,
        element <- s.element,
        modelElement <- s.modelElement,
        term <- s.term,
        relatedConcept <- s.relatedConcept,
        concept <- s.concept)
}

rule "orgomg::cwm::analysis::businessnomenclature::Term" {
    from s : INMODEL!"orgomg::cwm::analysis::businessnomenclature::Term" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::analysis::businessnomenclature::Term" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        definition <- s.definition,
        example <- s.example,
        usage <- s.usage,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        relatedElement <- s.relatedElement,
        element <- s.element,
        modelElement <- s.modelElement,
        concept <- s.concept,
        relatedTerm <- s.relatedTerm,
        term <- s.term,
        preferredTerm <- s.preferredTerm,
        synonym <- s.synonym,
        widerTerm <- s.widerTerm,
        narrowerTerm <- s.narrowerTerm)
}

rule "orgomg::cwm::management::warehouseprocess::WarehouseStep" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::WarehouseStep" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::WarehouseStep" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        staticDefinition <- s.staticDefinition,
        isSequential <- s.isSequential,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        warehouseEvent <- s.warehouseEvent,
        internalEvent <- s.internalEvent,
        transformationStep <- s.transformationStep)
}

rule "orgomg::cwm::management::warehouseprocess::ProcessPackage" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::ProcessPackage" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::ProcessPackage" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwm::management::warehouseprocess::WarehouseActivity" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::WarehouseActivity" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::WarehouseActivity" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        staticDefinition <- s.staticDefinition,
        isSequential <- s.isSequential,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        warehouseEvent <- s.warehouseEvent,
        internalEvent <- s.internalEvent,
        warehouseStep <- s.warehouseStep,
        transformationActivity <- s.transformationActivity)
}

rule "orgomg::cwm::management::warehouseprocess::events::PointInTimeEvent" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::PointInTimeEvent" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::management::warehouseprocess::events::PointInTimeEvent") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::PointInTimeEvent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter)
}

rule "orgomg::cwm::management::warehouseprocess::events::CustomCalendarEvent" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::CustomCalendarEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::CustomCalendarEvent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter,
        customCalendar <- s.customCalendar)
}

rule "orgomg::cwm::management::warehouseprocess::events::CustomCalendar" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::CustomCalendar" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::CustomCalendar" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        customCalendarEvent <- s.customCalendarEvent)
}

rule "orgomg::cwm::management::warehouseprocess::events::CalendarDate" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::CalendarDate" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::CalendarDate" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        specificDate <- s.specificDate,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwm::management::warehouseprocess::events::IntervalEvent" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::IntervalEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::IntervalEvent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        duration <- s.duration,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter)
}

rule "orgomg::cwm::management::warehouseprocess::events::ExternalEvent" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::ExternalEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::ExternalEvent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter)
}

rule "orgomg::cwm::management::warehouseprocess::events::InternalEvent" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::InternalEvent" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::management::warehouseprocess::events::InternalEvent") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::InternalEvent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter,
        triggeringWP <- s.triggeringWP,
        condition <- s.condition)
}

rule "orgomg::cwm::management::warehouseprocess::events::CascadeEvent" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::CascadeEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::CascadeEvent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        waitRule <- s.waitRule,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter,
        triggeringWP <- s.triggeringWP,
        condition <- s.condition)
}

rule "orgomg::cwm::management::warehouseprocess::events::RetryEvent" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::RetryEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::RetryEvent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        waitDuration <- s.waitDuration,
        maxCount <- s.maxCount,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter,
        triggeringWP <- s.triggeringWP,
        condition <- s.condition)
}

rule "orgomg::cwm::management::warehouseprocess::events::RecurringPointInTimeEvent" {
    from s : INMODEL!"orgomg::cwm::management::warehouseprocess::events::RecurringPointInTimeEvent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseprocess::events::RecurringPointInTimeEvent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        recurringType <- s.recurringType,
        frequencyFactor <- s.frequencyFactor,
        month <- s.month,
        dayOfMonth <- s.dayOfMonth,
        dayOfWeek <- s.dayOfWeek,
        hour <- s.hour,
        minute <- s.minute,
        second <- s.second,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        parameter <- s.parameter)
}

rule "orgomg::cwm::management::warehouseoperation::Measurement" {
    from s : INMODEL!"orgomg::cwm::management::warehouseoperation::Measurement" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseoperation::Measurement" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        value <- s.value,
        unit <- s.unit,
        type <- s.type,
        creationDate <- s.creationDate,
        effectiveDate <- s.effectiveDate,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        modelElement <- s.modelElement)
}

rule "orgomg::cwm::management::warehouseoperation::ChangeRequest" {
    from s : INMODEL!"orgomg::cwm::management::warehouseoperation::ChangeRequest" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseoperation::ChangeRequest" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        changeDescription <- s.changeDescription,
        changeReason <- s.changeReason,
        status <- s.status,
        completed <- s.completed,
        requestDate <- s.requestDate,
        completionDate <- s.completionDate,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        modelElement <- s.modelElement)
}

rule "orgomg::cwm::management::warehouseoperation::TransformationExecution" {
    from s : INMODEL!"orgomg::cwm::management::warehouseoperation::TransformationExecution" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwm::management::warehouseoperation::TransformationExecution") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwm::management::warehouseoperation::TransformationExecution" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        startDate <- s.startDate,
        endDate <- s.endDate,
        inProgress <- s.inProgress,
        successful <- s.successful,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        status <- s.status)
}

rule "orgomg::cwm::management::warehouseoperation::ActivityExecution" {
    from s : INMODEL!"orgomg::cwm::management::warehouseoperation::ActivityExecution" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseoperation::ActivityExecution" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        startDate <- s.startDate,
        endDate <- s.endDate,
        inProgress <- s.inProgress,
        successful <- s.successful,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        status <- s.status,
        transformationActivity <- s.transformationActivity,
        stepExecution <- s.stepExecution)
}

rule "orgomg::cwm::management::warehouseoperation::StepExecution" {
    from s : INMODEL!"orgomg::cwm::management::warehouseoperation::StepExecution" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwm::management::warehouseoperation::StepExecution" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        startDate <- s.startDate,
        endDate <- s.endDate,
        inProgress <- s.inProgress,
        successful <- s.successful,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        status <- s.status,
        transformationStep <- s.transformationStep,
        callAction <- s.callAction)
}

rule "orgomg::cwmx::foundation::er::Entity" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::Entity" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::Entity" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index)
}

rule "orgomg::cwmx::foundation::er::NonuniqueKey" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::NonuniqueKey" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::NonuniqueKey" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isPartitioning <- s.isPartitioning,
        isSorted <- s.isSorted,
        isUnique <- s.isUnique,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        indexedFeature <- s.indexedFeature,
        spannedClass <- s.spannedClass)
}

rule "orgomg::cwmx::foundation::er::CandidateKey" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::CandidateKey" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmx::foundation::er::CandidateKey") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::CandidateKey" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        keyRelationship <- s.keyRelationship)
}

rule "orgomg::cwmx::foundation::er::ForeignKey" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::ForeignKey" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::ForeignKey" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        uniqueKey <- s.uniqueKey,
        relationshipEnd <- s.relationshipEnd)
}

rule "orgomg::cwmx::foundation::er::Domain" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::Domain" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::Domain" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        default <- s.default,
        validationRule <- s.validationRule,
        baseType <- s.baseType)
}

rule "orgomg::cwmx::foundation::er::Attribute" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::Attribute" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::Attribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue)
}

rule "orgomg::cwmx::foundation::er::Relationship" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::Relationship" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::Relationship" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index)
}

rule "orgomg::cwmx::foundation::er::RelationshipEnd" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::RelationshipEnd" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::RelationshipEnd" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        aggregation <- s.aggregation,
        isNavigable <- s.isNavigable,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        delete <- s.delete,
        update <- s.update,
        insert <- s.insert,
        foreignKey <- s.foreignKey)
}

rule "orgomg::cwmx::foundation::er::ModelLibrary" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::ModelLibrary" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::ModelLibrary" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwmx::foundation::er::Model" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::Model" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::Model" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwmx::foundation::er::SubjectArea" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::SubjectArea" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::SubjectArea" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwmx::foundation::er::PrimaryKey" {
    from s : INMODEL!"orgomg::cwmx::foundation::er::PrimaryKey" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::foundation::er::PrimaryKey" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature,
        keyRelationship <- s.keyRelationship)
}

rule "orgomg::cwmx::resource::coboldata::COBOLFD" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::COBOLFD" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::COBOLFD" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isSelfDescribing <- s.isSelfDescribing,
        recordDelimiter <- s.recordDelimiter,
        skipRecords <- s.skipRecords,
        organization <- s.organization,
        accessMode <- s.accessMode,
        isOptional <- s.isOptional,
        reserveAreas <- s.reserveAreas,
        assignTo <- s.assignTo,
        codeSetLit <- s.codeSetLit,
        blockSizeUnit <- s.blockSizeUnit,
        minBlocks <- s.minBlocks,
        maxBlocks <- s.maxBlocks,
        minRecords <- s.minRecords,
        maxRecords <- s.maxRecords,
        labelKind <- s.labelKind,
        isExternal <- s.isExternal,
        isGlobal <- s.isGlobal,
        padLiteral <- s.padLiteral,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        record <- s.record,
        statusID <- s.statusID,
        linageInfo <- s.linageInfo,
        dependsOn <- s.dependsOn,
        padField <- s.padField,
        relativeField <- s.relativeField)
}

rule "orgomg::cwmx::resource::coboldata::COBOLField" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::COBOLField" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::COBOLField" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        level <- s.level,
        signKind <- s.signKind,
        isFiller <- s.isFiller,
        isJustifiedRight <- s.isJustifiedRight,
        isBlankWhenZero <- s.isBlankWhenZero,
        isSynchronized <- s.isSynchronized,
        picture <- s.picture,
        occursLower <- s.occursLower,
        occursUpper <- s.occursUpper,
        indexName <- s.indexName,
        isExternal <- s.isExternal,
        isGlobal <- s.isGlobal,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        occurringField <- s.occurringField,
        statusFD <- s.statusFD,
        linageInfo <- s.linageInfo,
        dependingFD <- s.dependingFD,
        paddedFD <- s.paddedFD,
        relativeFD <- s.relativeFD,
        dependingOnField <- s.dependingOnField,
        redefinedField <- s.redefinedField,
        redefinedByField <- s.redefinedByField,
        occursKeyInfo <- s.occursKeyInfo,
        occursKeyFieldInfo <- s.occursKeyFieldInfo,
        firstRenames <- s.firstRenames,
        thruRenames <- s.thruRenames)
}

rule "orgomg::cwmx::resource::coboldata::Renames" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::Renames" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::Renames" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        occurringField <- s.occurringField,
        statusFD <- s.statusFD,
        linageInfo <- s.linageInfo,
        dependingFD <- s.dependingFD,
        paddedFD <- s.paddedFD,
        relativeFD <- s.relativeFD,
        firstField <- s.firstField,
        thruField <- s.thruField)
}

rule "orgomg::cwmx::resource::coboldata::Section" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::Section" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmx::resource::coboldata::Section") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::Section" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        record <- s.record)
}

rule "orgomg::cwmx::resource::coboldata::WorkingStorageSection" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::WorkingStorageSection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::WorkingStorageSection" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        record <- s.record)
}

rule "orgomg::cwmx::resource::coboldata::FileSection" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::FileSection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::FileSection" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        record <- s.record,
        cobolFD <- s.cobolFD)
}

rule "orgomg::cwmx::resource::coboldata::ReportWriterSection" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::ReportWriterSection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::ReportWriterSection" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        record <- s.record)
}

rule "orgomg::cwmx::resource::coboldata::LinkageSection" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::LinkageSection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::LinkageSection" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        record <- s.record)
}

rule "orgomg::cwmx::resource::coboldata::OccursKey" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::OccursKey" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::OccursKey" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAscending <- s.isAscending,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        occursKeyField <- s.occursKeyField)
}

rule "orgomg::cwmx::resource::coboldata::LinageInfo" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::LinageInfo" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::LinageInfo" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        value <- s.value,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        cobolItem <- s.cobolItem)
}

rule "orgomg::cwmx::resource::coboldata::COBOLFDIndex" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::COBOLFDIndex" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::COBOLFDIndex" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isPartitioning <- s.isPartitioning,
        isSorted <- s.isSorted,
        isUnique <- s.isUnique,
        isAlternate <- s.isAlternate,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        indexedFeature <- s.indexedFeature,
        spannedClass <- s.spannedClass)
}

rule "orgomg::cwmx::resource::coboldata::Usage" {
    from s : INMODEL!"orgomg::cwmx::resource::coboldata::Usage" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::coboldata::Usage" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension)
}

rule "orgomg::cwmx::resource::dmsii::Database" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::Database" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::Database" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        isLogical <- s.isLogical,
        guardFile <- s.guardFile,
        source <- s.source,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwmx::resource::dmsii::Remap" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::Remap" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::Remap" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        fieldDelimiter <- s.fieldDelimiter,
        isFixedWidth <- s.isFixedWidth,
        textDelimiter <- s.textDelimiter,
        isRequiredAll <- s.isRequiredAll,
        isReadOnlyAll <- s.isReadOnlyAll,
        isGivingException <- s.isGivingException,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        file <- s.file,
        section <- s.section,
        selectCondition <- s.selectCondition,
        structure <- s.structure)
}

rule "orgomg::cwmx::resource::dmsii::DataSet" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::DataSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::DataSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        fieldDelimiter <- s.fieldDelimiter,
        isFixedWidth <- s.isFixedWidth,
        textDelimiter <- s.textDelimiter,
        isGlobal <- s.isGlobal,
        organization <- s.organization,
        reorganize <- s.reorganize,
        isRequiredAll <- s.isRequiredAll,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        file <- s.file,
        section <- s.section,
        partitioningSet <- s.partitioningSet)
}

rule "orgomg::cwmx::resource::dmsii::DataItem" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::DataItem" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::DataItem" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        isRequired <- s.isRequired,
        size <- s.size,
        scaleFactor <- s.scaleFactor,
        isSigned <- s.isSigned,
        occurs <- s.occurs,
        isVirtual <- s.isVirtual,
        isKanji <- s.isKanji,
        ccsVersion <- s.ccsVersion,
        isGemcosLiteral <- s.isGemcosLiteral,
        isGemcosData <- s.isGemcosData,
        isGemcosSSN <- s.isGemcosSSN,
        isGemcosDBSN <- s.isGemcosDBSN,
        isComsProgram <- s.isComsProgram,
        isComsID <- s.isComsID,
        isComsLocator <- s.isComsLocator,
        isComsOutpQ <- s.isComsOutpQ,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        nullValue <- s.nullValue,
        virtualExpression <- s.virtualExpression,
        occuringDataItem <- s.occuringDataItem,
        occursDataItem <- s.occursDataItem,
        keyDataSet <- s.keyDataSet,
        fieldBit <- s.fieldBit,
        structure <- s.structure)
}

rule "orgomg::cwmx::resource::dmsii::VariableFormatPart" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::VariableFormatPart" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::VariableFormatPart" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        fieldDelimiter <- s.fieldDelimiter,
        isFixedWidth <- s.isFixedWidth,
        textDelimiter <- s.textDelimiter,
        vfLabel <- s.vfLabel,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        file <- s.file,
        section <- s.section,
        selectCondition <- s.selectCondition)
}

rule "orgomg::cwmx::resource::dmsii::SetStructure" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::SetStructure" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmx::resource::dmsii::SetStructure") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::SetStructure" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        duplicates <- s.duplicates,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap)
}

rule "orgomg::cwmx::resource::dmsii::Set" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::Set" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmx::resource::dmsii::Set") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::Set" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        duplicates <- s.duplicates,
        setType <- s.setType,
        reorganize <- s.reorganize,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        keyDataItem <- s.keyDataItem,
        partitionedSet <- s.partitionedSet,
        partitioningSet <- s.partitioningSet,
        partitionedDataSet <- s.partitionedDataSet)
}

rule "orgomg::cwmx::resource::dmsii::Access" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::Access" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::Access" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        duplicates <- s.duplicates,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap)
}

rule "orgomg::cwmx::resource::dmsii::Subset" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::Subset" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmx::resource::dmsii::Subset") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::Subset" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        duplicates <- s.duplicates,
        setType <- s.setType,
        reorganize <- s.reorganize,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        keyDataItem <- s.keyDataItem,
        partitionedSet <- s.partitionedSet,
        partitioningSet <- s.partitioningSet,
        partitionedDataSet <- s.partitionedDataSet)
}

rule "orgomg::cwmx::resource::dmsii::AutomaticSubset" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::AutomaticSubset" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::AutomaticSubset" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        duplicates <- s.duplicates,
        setType <- s.setType,
        reorganize <- s.reorganize,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        keyDataItem <- s.keyDataItem,
        partitionedSet <- s.partitionedSet,
        partitioningSet <- s.partitioningSet,
        partitionedDataSet <- s.partitionedDataSet,
        condition <- s.condition)
}

rule "orgomg::cwmx::resource::dmsii::KeyItem" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::KeyItem" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::KeyItem" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAscending <- s.isAscending,
        collation <- s.collation,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        feature <- s.feature)
}

rule "orgomg::cwmx::resource::dmsii::RemapItem" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::RemapItem" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::RemapItem" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        occurs <- s.occurs,
        isRequired <- s.isRequired,
        isHidden <- s.isHidden,
        isReadOnly <- s.isReadOnly,
        isGivingException <- s.isGivingException,
        isVirtual <- s.isVirtual,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        virtualExpression <- s.virtualExpression)
}

rule "orgomg::cwmx::resource::dmsii::FieldBit" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::FieldBit" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::FieldBit" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::resource::dmsii::Remark" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::Remark" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::Remark" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        text <- s.text,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap)
}

rule "orgomg::cwmx::resource::dmsii::PhysicalDatabase" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::PhysicalDatabase" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::PhysicalDatabase" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwmx::resource::dmsii::PhysicalDataSet" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::PhysicalDataSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::PhysicalDataSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::resource::dmsii::DASDLComment" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::DASDLComment" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::DASDLComment" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        body <- s.body,
        language <- s.language,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        modelElement <- s.modelElement)
}

rule "orgomg::cwmx::resource::dmsii::PhysicalSet" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::PhysicalSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::PhysicalSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::resource::dmsii::PhysicalDataSetOverride" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::PhysicalDataSetOverride" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::PhysicalDataSetOverride" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap)
}

rule "orgomg::cwmx::resource::dmsii::PhysicalSetOverride" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::PhysicalSetOverride" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::PhysicalSetOverride" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap)
}

rule "orgomg::cwmx::resource::dmsii::PhysicalAccessOverride" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::PhysicalAccessOverride" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::PhysicalAccessOverride" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap)
}

rule "orgomg::cwmx::resource::dmsii::DASDLProperty" {
    from s : INMODEL!"orgomg::cwmx::resource::dmsii::DASDLProperty" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::dmsii::DASDLProperty" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        text <- s.text,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        owner <- s.owner)
}

rule "orgomg::cwmx::resource::imsdatabase::DBD" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::DBD" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::DBD" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isSelfDescribing <- s.isSelfDescribing,
        recordDelimiter <- s.recordDelimiter,
        skipRecords <- s.skipRecords,
        dliAccess <- s.dliAccess,
        isVSAM <- s.isVSAM,
        passwordFlag <- s.passwordFlag,
        versionString <- s.versionString,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        record <- s.record,
        accessMethod <- s.accessMethod,
        acblib <- s.acblib,
        dataset <- s.dataset,
        segment <- s.segment,
        pcb <- s.pcb,
        exit <- s.exit,
        "library" <- s."library")
}

rule "orgomg::cwmx::resource::imsdatabase::PSB" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::PSB" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::PSB" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isSelfDescribing <- s.isSelfDescribing,
        recordDelimiter <- s.recordDelimiter,
        skipRecords <- s.skipRecords,
        compatibility <- s.compatibility,
        ioErrorOption <- s.ioErrorOption,
        ioaSize <- s.ioaSize,
        language <- s.language,
        lockMaximum <- s.lockMaximum,
        maximumQxCalls <- s.maximumQxCalls,
        onlineImageCopy <- s.onlineImageCopy,
        ssaSize <- s.ssaSize,
        writeToOperator <- s.writeToOperator,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        record <- s.record,
        acblib <- s.acblib,
        pcb <- s.pcb,
        "library" <- s."library")
}

rule "orgomg::cwmx::resource::imsdatabase::PCB" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::PCB" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::PCB" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isSelfDescribing <- s.isSelfDescribing,
        recordDelimiter <- s.recordDelimiter,
        skipRecords <- s.skipRecords,
        pcbType <- s.pcbType,
        list <- s.list,
        keyLength <- s.keyLength,
        processingOptions <- s.processingOptions,
        positioning <- s.positioning,
        sequentialBuffering <- s.sequentialBuffering,
        alternateResponse <- s.alternateResponse,
        express <- s.express,
        modify <- s.modify,
        sameTerminal <- s.sameTerminal,
        destinationType <- s.destinationType,
        ltermName <- s.ltermName,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        record <- s.record,
        procSeq <- s.procSeq,
        dbd <- s.dbd,
        psb <- s.psb,
        senSegment <- s.senSegment)
}

rule "orgomg::cwmx::resource::imsdatabase::Segment" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::Segment" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmx::resource::imsdatabase::Segment") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::Segment" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        fieldDelimiter <- s.fieldDelimiter,
        isFixedWidth <- s.isFixedWidth,
        textDelimiter <- s.textDelimiter,
        exitFlag <- s.exitFlag,
        frequency <- s.frequency,
        maximumLength <- s.maximumLength,
        minimumLength <- s.minimumLength,
        rules <- s.rules,
        subsetPointers <- s.subsetPointers,
        directDependent <- s.directDependent,
        pcPointer <- s.pcPointer,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        file <- s.file,
        section <- s.section,
        logical <- s.logical,
        senseg <- s.senseg,
        child <- s.child,
        parent <- s.parent,
        exit <- s.exit)
}

rule "orgomg::cwmx::resource::imsdatabase::SegmentComplex" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::SegmentComplex" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::SegmentComplex" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        fieldDelimiter <- s.fieldDelimiter,
        isFixedWidth <- s.isFixedWidth,
        textDelimiter <- s.textDelimiter,
        exitFlag <- s.exitFlag,
        frequency <- s.frequency,
        maximumLength <- s.maximumLength,
        minimumLength <- s.minimumLength,
        rules <- s.rules,
        subsetPointers <- s.subsetPointers,
        directDependent <- s.directDependent,
        pcPointer <- s.pcPointer,
        deleteFlag <- s.deleteFlag,
        insertFlag <- s.insertFlag,
        replaceFlag <- s.replaceFlag,
        segmPointer <- s.segmPointer,
        dsGroup <- s.dsGroup,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        file <- s.file,
        section <- s.section,
        logical <- s.logical,
        senseg <- s.senseg,
        child <- s.child,
        parent <- s.parent,
        exit <- s.exit,
        secondaryIndex <- s.secondaryIndex,
        lchild <- s.lchild,
        sourcedIndex <- s.sourcedIndex,
        lparent <- s.lparent,
        pairedLCHILD <- s.pairedLCHILD,
        dataset <- s.dataset)
}

rule "orgomg::cwmx::resource::imsdatabase::SegmentLogical" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::SegmentLogical" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::SegmentLogical" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        fieldDelimiter <- s.fieldDelimiter,
        isFixedWidth <- s.isFixedWidth,
        textDelimiter <- s.textDelimiter,
        exitFlag <- s.exitFlag,
        frequency <- s.frequency,
        maximumLength <- s.maximumLength,
        minimumLength <- s.minimumLength,
        rules <- s.rules,
        subsetPointers <- s.subsetPointers,
        directDependent <- s.directDependent,
        pcPointer <- s.pcPointer,
        keyData1 <- s.keyData1,
        keyData2 <- s.keyData2,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        file <- s.file,
        section <- s.section,
        logical <- s.logical,
        senseg <- s.senseg,
        child <- s.child,
        parent <- s.parent,
        exit <- s.exit,
        physical <- s.physical)
}

rule "orgomg::cwmx::resource::imsdatabase::Field" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::Field" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::Field" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        offset <- s.offset,
        offsetUnitBits <- s.offsetUnitBits,
        sequenceField <- s.sequenceField,
        uniqueSequence <- s.uniqueSequence,
        fieldLength <- s.fieldLength,
        generated <- s.generated,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        searchIndex <- s.searchIndex,
        ddataIndex <- s.ddataIndex,
        subseqIndex <- s.subseqIndex,
        senField <- s.senField)
}

rule "orgomg::cwmx::resource::imsdatabase::Dataset" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::Dataset" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::Dataset" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        dd1name <- s.dd1name,
        device <- s.device,
        model <- s.model,
        dd2name <- s.dd2name,
        size1 <- s.size1,
        size2 <- s.size2,
        recordLength1 <- s.recordLength1,
        recordLength2 <- s.recordLength2,
        blockingFactor1 <- s.blockingFactor1,
        blockingFactor2 <- s.blockingFactor2,
        datasetLabel <- s.datasetLabel,
        freeBlockFrequency <- s.freeBlockFrequency,
        freeSpacePercentage <- s.freeSpacePercentage,
        recordFormat <- s.recordFormat,
        scanCylinders <- s.scanCylinders,
        searchAlgorithm <- s.searchAlgorithm,
        root <- s.root,
        rootOverflow <- s.rootOverflow,
        uow <- s.uow,
        uowOverflow <- s.uowOverflow,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        segment <- s.segment)
}

rule "orgomg::cwmx::resource::imsdatabase::SenSegment" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::SenSegment" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::SenSegment" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        fieldDelimiter <- s.fieldDelimiter,
        isFixedWidth <- s.isFixedWidth,
        textDelimiter <- s.textDelimiter,
        procoptSENSEG <- s.procoptSENSEG,
        subsetPointers <- s.subsetPointers,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        file <- s.file,
        section <- s.section,
        senField <- s.senField,
        segment <- s.segment)
}

rule "orgomg::cwmx::resource::imsdatabase::SenField" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::SenField" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::SenField" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        length <- s.length,
        precision <- s.precision,
        scale <- s.scale,
        offset <- s.offset,
        offsetUnitBits <- s.offsetUnitBits,
        replace <- s.replace,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        field <- s.field)
}

rule "orgomg::cwmx::resource::imsdatabase::ACBLIB" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::ACBLIB" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::ACBLIB" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        psb <- s.psb,
        dbd <- s.dbd)
}

rule "orgomg::cwmx::resource::imsdatabase::AccessMethod" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::AccessMethod" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmx::resource::imsdatabase::AccessMethod") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::AccessMethod" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::resource::imsdatabase::INDEX" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::INDEX" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::INDEX" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        dosCompatibility <- s.dosCompatibility,
        protect <- s.protect,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        primaryTarget <- s.primaryTarget,
        secondaryTarget <- s.secondaryTarget,
        sharingIndex <- s.sharingIndex,
        sharedIndex <- s.sharedIndex,
        sequencedPCB <- s.sequencedPCB)
}

rule "orgomg::cwmx::resource::imsdatabase::HIDAM" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::HIDAM" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::HIDAM" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        index <- s.index)
}

rule "orgomg::cwmx::resource::imsdatabase::DEDB" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::DEDB" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::DEDB" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        rmName <- s.rmName,
        stage <- s.stage,
        extendedCall <- s.extendedCall,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::resource::imsdatabase::HDAM" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::HDAM" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::HDAM" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        rmName <- s.rmName,
        relativeBlockNumber <- s.relativeBlockNumber,
        rootAnchorPoints <- s.rootAnchorPoints,
        rootMaxBytes <- s.rootMaxBytes,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::resource::imsdatabase::MSDB" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::MSDB" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::MSDB" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        msdbField <- s.msdbField,
        msdbType <- s.msdbType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::resource::imsdatabase::SecondaryIndex" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::SecondaryIndex" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::SecondaryIndex" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        constant <- s.constant,
        exitRoutine <- s.exitRoutine,
        nullValue <- s.nullValue,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        index <- s.index,
        searchFields <- s.searchFields,
        ddataFields <- s.ddataFields,
        subseqFields <- s.subseqFields,
        indexSource <- s.indexSource)
}

rule "orgomg::cwmx::resource::imsdatabase::Exit" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::Exit" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::Exit" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        key <- s.key,
        data <- s.data,
        path <- s.path,
        log <- s.log,
        cascade <- s.cascade,
        cascadeKey <- s.cascadeKey,
        cascadeData <- s.cascadeData,
        cascadePath <- s.cascadePath,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::resource::imsdatabase::LCHILD" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::LCHILD" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::LCHILD" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        counter <- s.counter,
        lcPointer <- s.lcPointer,
        lparentFlag <- s.lparentFlag,
        ltwin <- s.ltwin,
        rules <- s.rules,
        virtualParent <- s.virtualParent,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        lchild <- s.lchild,
        pairedSegment <- s.pairedSegment)
}

rule "orgomg::cwmx::resource::imsdatabase::PSBLib" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::PSBLib" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::PSBLib" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        psb <- s.psb)
}

rule "orgomg::cwmx::resource::imsdatabase::DBDLib" {
    from s : INMODEL!"orgomg::cwmx::resource::imsdatabase::DBDLib" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::imsdatabase::DBDLib" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        dbd <- s.dbd)
}

rule "orgomg::cwmx::resource::essbase::Alias" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Alias" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Alias" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::Application" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Application" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Application" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "orgomg::cwmx::resource::essbase::Comment" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Comment" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Comment" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::Consolidation" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Consolidation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Consolidation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::CurrencyConversion" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::CurrencyConversion" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::CurrencyConversion" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::DataStorage" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::DataStorage" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::DataStorage" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::Database" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Database" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Database" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isCurrency <- s.isCurrency,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        dimensionedObject <- s.dimensionedObject,
        dimension <- s.dimension,
        outline <- s.outline)
}

rule "orgomg::cwmx::resource::essbase::Dimension" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Dimension" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Dimension" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        type <- s.type,
        isDense <- s.isDense,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        dimensionedObject <- s.dimensionedObject,
        composite <- s.composite,
        component <- s.component,
        memberSet <- s.memberSet,
        outline <- s.outline)
}

rule "orgomg::cwmx::resource::essbase::Formula" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Formula" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Formula" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::Generation" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Generation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Generation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::ImmediateParent" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::ImmediateParent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::ImmediateParent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::Level" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Level" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Level" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::MemberName" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::MemberName" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::MemberName" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::OLAPServer" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::OLAPServer" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::OLAPServer" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        pathname <- s.pathname,
        isCaseSensitive <- s.isCaseSensitive,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployedSoftwareSystem <- s.deployedSoftwareSystem,
        component <- s.component,
        clientConnection <- s.clientConnection,
        dataPackage <- s.dataPackage)
}

rule "orgomg::cwmx::resource::essbase::Outline" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::Outline" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::Outline" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        aliasTableName <- s.aliasTableName,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::ReplicatedPartition" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::ReplicatedPartition" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::ReplicatedPartition" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isReadOnly <- s.isReadOnly,
        isFullyRealized <- s.isFullyRealized,
        isSource <- s.isSource,
        isShared <- s.isShared,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelectionGroup <- s.memberSelectionGroup,
        cubeDeployment <- s.cubeDeployment,
        formula <- s.formula)
}

rule "orgomg::cwmx::resource::essbase::TimeBalance" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::TimeBalance" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::TimeBalance" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::TransparentPartition" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::TransparentPartition" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::TransparentPartition" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isReadOnly <- s.isReadOnly,
        isFullyRealized <- s.isFullyRealized,
        isSource <- s.isSource,
        isShared <- s.isShared,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelectionGroup <- s.memberSelectionGroup,
        cubeDeployment <- s.cubeDeployment,
        formula <- s.formula)
}

rule "orgomg::cwmx::resource::essbase::TwoPassCalculation" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::TwoPassCalculation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::TwoPassCalculation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::UDA" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::UDA" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::UDA" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::VarianceReporting" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::VarianceReporting" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::VarianceReporting" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::essbase::LinkedPartition" {
    from s : INMODEL!"orgomg::cwmx::resource::essbase::LinkedPartition" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::essbase::LinkedPartition" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isReadOnly <- s.isReadOnly,
        isFullyRealized <- s.isFullyRealized,
        isSource <- s.isSource,
        isShared <- s.isShared,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelectionGroup <- s.memberSelectionGroup,
        cubeDeployment <- s.cubeDeployment,
        formula <- s.formula)
}

rule "orgomg::cwmx::resource::express::Database" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Database" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Database" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        dimensionedObject <- s.dimensionedObject,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::express::Conjoint" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Conjoint" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Conjoint" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        searchAlgorithm <- s.searchAlgorithm,
        pageSpace <- s.pageSpace,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        dimensionedObject <- s.dimensionedObject,
        composite <- s.composite,
        component <- s.component,
        memberSet <- s.memberSet,
        relation <- s.relation,
        columnDimensionInWorksheet <- s.columnDimensionInWorksheet,
        rowDimensionInWorksheet <- s.rowDimensionInWorksheet,
        valueSet <- s.valueSet,
        aggMapComponent <- s.aggMapComponent)
}

rule "orgomg::cwmx::resource::express::Program" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Program" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Program" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        program <- s.program,
        returnDimension <- s.returnDimension,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        deployment <- s.deployment)
}

rule "orgomg::cwmx::resource::express::Model" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Model" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Model" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        content <- s.content,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        deployment <- s.deployment)
}

rule "orgomg::cwmx::resource::express::Variable" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Variable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Variable" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        storageType <- s.storageType,
        pageSpace <- s.pageSpace,
        width <- s.width,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::express::Formula" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Formula" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Formula" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        expression <- s.expression,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension)
}

rule "orgomg::cwmx::resource::express::ValueSet" {
    from s : INMODEL!"orgomg::cwmx::resource::express::ValueSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::ValueSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        isTemp <- s.isTemp,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension,
        referenceDimension <- s.referenceDimension)
}

rule "orgomg::cwmx::resource::express::Relation" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Relation" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Relation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        isTemp <- s.isTemp,
        pageSpace <- s.pageSpace,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        dimension <- s.dimension,
        referenceDimension <- s.referenceDimension,
        aggMapComponent <- s.aggMapComponent)
}

rule "orgomg::cwmx::resource::express::Worksheet" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Worksheet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Worksheet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isTemp <- s.isTemp,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        columnDimension <- s.columnDimension,
        rowDimension <- s.rowDimension)
}

rule "orgomg::cwmx::resource::express::Composite" {
    from s : INMODEL!"orgomg::cwmx::resource::express::Composite" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::Composite" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        searchAlgorithm <- s.searchAlgorithm,
        pageSpace <- s.pageSpace,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        dimensionedObject <- s.dimensionedObject,
        composite <- s.composite,
        component <- s.component,
        memberSet <- s.memberSet,
        relation <- s.relation,
        columnDimensionInWorksheet <- s.columnDimensionInWorksheet,
        rowDimensionInWorksheet <- s.rowDimensionInWorksheet,
        valueSet <- s.valueSet,
        aggMapComponent <- s.aggMapComponent)
}

rule "orgomg::cwmx::resource::express::SimpleDimension" {
    from s : INMODEL!"orgomg::cwmx::resource::express::SimpleDimension" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::SimpleDimension" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        width <- s.width,
        isTime <- s.isTime,
        multiple <- s.multiple,
        beginningPhase <- s.beginningPhase,
        endingPhase <- s.endingPhase,
        searchAlgorithm <- s.searchAlgorithm,
        pageSpace <- s.pageSpace,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        dimensionedObject <- s.dimensionedObject,
        composite <- s.composite,
        component <- s.component,
        memberSet <- s.memberSet,
        relation <- s.relation,
        columnDimensionInWorksheet <- s.columnDimensionInWorksheet,
        rowDimensionInWorksheet <- s.rowDimensionInWorksheet,
        valueSet <- s.valueSet,
        aggMapComponent <- s.aggMapComponent,
        aliasDimension <- s.aliasDimension,
        dataType <- s.dataType)
}

rule "orgomg::cwmx::resource::express::AliasDimension" {
    from s : INMODEL!"orgomg::cwmx::resource::express::AliasDimension" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::AliasDimension" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        dimensionedObject <- s.dimensionedObject,
        composite <- s.composite,
        component <- s.component,
        memberSet <- s.memberSet,
        relation <- s.relation,
        columnDimensionInWorksheet <- s.columnDimensionInWorksheet,
        rowDimensionInWorksheet <- s.rowDimensionInWorksheet,
        valueSet <- s.valueSet,
        aggMapComponent <- s.aggMapComponent,
        baseDimension <- s.baseDimension)
}

rule "orgomg::cwmx::resource::express::AggMap" {
    from s : INMODEL!"orgomg::cwmx::resource::express::AggMap" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::AggMap" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        aggMapComponent <- s.aggMapComponent)
}

rule "orgomg::cwmx::resource::express::AggMapComponent" {
    from s : INMODEL!"orgomg::cwmx::resource::express::AggMapComponent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::AggMapComponent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        aggOperator <- s.aggOperator,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        relation <- s.relation,
        dimension <- s.dimension,
        computeClause <- s.computeClause)
}

rule "orgomg::cwmx::resource::express::PreComputeClause" {
    from s : INMODEL!"orgomg::cwmx::resource::express::PreComputeClause" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::resource::express::PreComputeClause" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        statusList <- s.statusList,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty)
}

rule "orgomg::cwmx::analysis::informationset::InformationSet" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationset::InformationSet" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationset::InformationSet" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        version <- s.version,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        cube <- s.cube,
        dimension <- s.dimension,
        deploymentGroup <- s.deploymentGroup,
        "rule" <- s."rule",
        infoSetAdmin <- s.infoSetAdmin)
}

rule "orgomg::cwmx::analysis::informationset::Segment" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationset::Segment" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationset::Segment" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isVirtual <- s.isVirtual,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        cubeDimensionAssociation <- s.cubeDimensionAssociation,
        cubeRegion <- s.cubeRegion,
        regionSequence <- s.regionSequence,
        "rule" <- s."rule")
}

rule "orgomg::cwmx::analysis::informationset::SegmentRegion" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationset::SegmentRegion" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationset::SegmentRegion" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isReadOnly <- s.isReadOnly,
        isFullyRealized <- s.isFullyRealized,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        memberSelectionGroup <- s.memberSelectionGroup,
        cubeDeployment <- s.cubeDeployment,
        "rule" <- s."rule")
}

rule "orgomg::cwmx::analysis::informationset::Rule" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationset::Rule" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationset::Rule" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ruleExpression <- s.ruleExpression,
        informationSet <- s.informationSet,
        segment <- s.segment,
        segmentRegion <- s.segmentRegion)
}

rule "orgomg::cwmx::analysis::informationset::InfoSetAdministration" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationset::InfoSetAdministration" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationset::InfoSetAdministration" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        priority <- s.priority,
        acknowledgement <- s.acknowledgement,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        date <- s.date)
}

rule "orgomg::cwmx::analysis::informationset::InfoSetDate" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationset::InfoSetDate" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationset::InfoSetDate" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        type <- s.type,
        format <- s.format,
        dateTime <- s.dateTime,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        infoSetAdmin <- s.infoSetAdmin)
}

rule "orgomg::cwmx::analysis::informationreporting::Report" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationreporting::Report" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationreporting::Report" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        action <- s.action,
        fileName <- s.fileName,
        type <- s.type,
        url <- s.url,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        formula <- s.formula,
        composite <- s.composite,
        component <- s.component,
        defaultRendering <- s.defaultRendering,
        modelElement <- s.modelElement,
        neighbor <- s.neighbor,
        referencingNeighbor <- s.referencingNeighbor)
}

rule "orgomg::cwmx::analysis::informationreporting::ReportAttribute" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationreporting::ReportAttribute" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationreporting::ReportAttribute" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue)
}

rule "orgomg::cwmx::analysis::informationreporting::ReportExecution" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationreporting::ReportExecution" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationreporting::ReportExecution" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        functionDescription <- s.functionDescription,
        isPrimary <- s.isPrimary,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        function <- s.function,
        source <- s.source,
        target <- s.target,
        task <- s.task)
}

rule "orgomg::cwmx::analysis::informationreporting::ReportField" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationreporting::ReportField" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationreporting::ReportField" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        action <- s.action,
        fileName <- s.fileName,
        type <- s.type,
        url <- s.url,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        formula <- s.formula,
        composite <- s.composite,
        component <- s.component,
        defaultRendering <- s.defaultRendering,
        modelElement <- s.modelElement,
        neighbor <- s.neighbor,
        referencingNeighbor <- s.referencingNeighbor)
}

rule "orgomg::cwmx::analysis::informationreporting::ReportGroup" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationreporting::ReportGroup" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationreporting::ReportGroup" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        action <- s.action,
        fileName <- s.fileName,
        type <- s.type,
        url <- s.url,
        groupType <- s.groupType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        formula <- s.formula,
        composite <- s.composite,
        component <- s.component,
        defaultRendering <- s.defaultRendering,
        modelElement <- s.modelElement,
        neighbor <- s.neighbor,
        referencingNeighbor <- s.referencingNeighbor,
        reportQuery <- s.reportQuery)
}

rule "orgomg::cwmx::analysis::informationreporting::ReportPackage" {
    from s : INMODEL!"orgomg::cwmx::analysis::informationreporting::ReportPackage" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmx::analysis::informationreporting::ReportPackage" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        rendering <- s.rendering)
}

rule "orgomg::cwmmip::UnitOfInterchange" {
    from s : INMODEL!"orgomg::cwmmip::UnitOfInterchange" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmmip::UnitOfInterchange" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        interchangePattern <- s.interchangePattern)
}

rule "orgomg::cwmmip::InterchangePattern" {
    from s : INMODEL!"orgomg::cwmmip::InterchangePattern" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmmip::InterchangePattern" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        version <- s.version,
        uri <- s.uri,
        classification <- s.classification,
        category <- s.category,
        projection <- s.projection,
        unitOfInterchange <- s.unitOfInterchange,
        componentPattern <- s.componentPattern,
        compositePattern <- s.compositePattern)
}

rule "orgomg::cwmmip::ModeledSemanticContext" {
    from s : INMODEL!"orgomg::cwmmip::ModeledSemanticContext" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmmip::ModeledSemanticContext" (
        __xmiID__ <- s.__xmiID__,
        element <- s.element,
        association <- s.association,
        anchorElement <- s.anchorElement,
        constraint <- s.constraint,
        mofAssociation <- s.mofAssociation,
        mofElement <- s.mofElement,
        mofAnchorElement <- s.mofAnchorElement)
}

rule "orgomg::cwmmip::SemanticContext" {
    from s : INMODEL!"orgomg::cwmmip::SemanticContext" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmmip::SemanticContext") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmmip::SemanticContext" (
        __xmiID__ <- s.__xmiID__,
        element <- s.element,
        association <- s.association,
        anchorElement <- s.anchorElement,
        constraint <- s.constraint)
}

rule "orgomg::cwmmip::Element" {
    from s : INMODEL!"orgomg::cwmmip::Element" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmmip::Element" (
        __xmiID__ <- s.__xmiID__)
}

rule "orgomg::cwmmip::GraphSubset" {
    from s : INMODEL!"orgomg::cwmmip::GraphSubset" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmmip::GraphSubset") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmmip::GraphSubset" (
        __xmiID__ <- s.__xmiID__,
        element <- s.element,
        deepCopy <- s.deepCopy,
        copyDepth <- s.copyDepth,
        aggregationsOnly <- s.aggregationsOnly,
        includeAssociations <- s.includeAssociations)
}

rule "orgomg::cwmmip::PatternConstraint" {
    from s : INMODEL!"orgomg::cwmmip::PatternConstraint" (
		if s.oclIsTypeOf(INMODEL!"orgomg::cwmmip::PatternConstraint") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"orgomg::cwmmip::PatternConstraint" (
        __xmiID__ <- s.__xmiID__,
        body <- s.body,
        language <- s.language)
}

rule "orgomg::cwmmip::ModeledGraphSubset" {
    from s : INMODEL!"orgomg::cwmmip::ModeledGraphSubset" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmmip::ModeledGraphSubset" (
        __xmiID__ <- s.__xmiID__,
        element <- s.element,
        deepCopy <- s.deepCopy,
        copyDepth <- s.copyDepth,
        aggregationsOnly <- s.aggregationsOnly,
        includeAssociations <- s.includeAssociations,
        mofElement <- s.mofElement)
}

rule "orgomg::cwmmip::Restriction" {
    from s : INMODEL!"orgomg::cwmmip::Restriction" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmmip::Restriction" (
        __xmiID__ <- s.__xmiID__,
        body <- s.body,
        language <- s.language)
}

rule "orgomg::cwmmip::BindingParameter" {
    from s : INMODEL!"orgomg::cwmmip::BindingParameter" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::cwmmip::BindingParameter" (
        __xmiID__ <- s.__xmiID__,
        body <- s.body,
        language <- s.language)
}

rule "orgomg::mof::model::ModelElement" {
    from s : INMODEL!"orgomg::mof::model::ModelElement" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::mof::model::ModelElement" (
        __xmiID__ <- s.__xmiID__,
        modeledGraphSubset <- s.modeledGraphSubset,
        modeledProjection <- s.modeledProjection,
        modeledSemanticContext <- s.modeledSemanticContext)
}

rule "orgomg::mof::model::Association" {
    from s : INMODEL!"orgomg::mof::model::Association" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"orgomg::mof::model::Association" (
        __xmiID__ <- s.__xmiID__,
        modeledProjection <- s.modeledProjection)
}

