-- @atlcompiler atl2006
-- Generated by: $Id$
-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore
-- this transformation script will transform metadata.ecore so that specialized type that can not be handled by dynamic EMF
-- will simply be translated into String types only for the migration purpose.
-- this script is used by the developer to generate the .ecore metamodel used for migration transformation for metadata 400 to 410
-- WARNING : note that transfomation should be done 'allowing inter-model reference' 

module TosMetadata400to410_migration_ecore;

create OUT : ECORE refining IN : ECORE;

--get the EClassifier named typeName
helper context ECORE!EClassifier def : isDataType(typeName : String) : Boolean = 
	let theClassifier : ECORE!EClassifier = ECORE!EClassifier.allInstances()->select(c | c.name = typeName).first() in self = theClassifier; 

--get the classifier of type EString
helper def : getStringType() : ECORE!EClassifier = ECORE!EClassifier.allInstances()->select(c | c.name = 'EString').first(); 

--get the classifier of type ELong
helper def : getLongType() : ECORE!EClassifier = ECORE!EClassifier.allInstances()->select(c | c.name = 'ELong').first(); 

--this redefine all structural feature of type FieldSeparator to the type EString
rule FieldSeparator2String {
	from fieldSepSF : ECORE!EStructuralFeature ( fieldSepSF.eType.isDataType('FieldSeparator') )
	to newSF : ECORE!EStructuralFeature (
		eType <- thisModule.getStringType()
	)
}

--this redefine all structural feature of type Map to the type EString
rule Map2String {
	from mapSF : ECORE!EStructuralFeature ( mapSF.eType.isDataType('Map') )
	to newSF : ECORE!EStructuralFeature (
		eType <- thisModule.getStringType()
	)
}

--this redefine all structural feature of type List to the type EString
rule List2String {
	from listSF : ECORE!EStructuralFeature ( listSF.eType.isDataType('List') )
	to newSF : ECORE!EStructuralFeature (
		eType <- thisModule.getStringType()
	)
}

--this refines the MetadataColumn length attribute from int to long values 
rule LengthIntToLong {
	from fieldSepSF : ECORE!EStructuralFeature ( fieldSepSF.name ='length' and fieldSepSF.eContainingClass.isDataType('MetadataColumn') )
	to newFieldSF : ECORE!EStructuralFeature (
		eType <- thisModule.getLongType()
	)
}

--this refines the MetadataColumn length and precison attribute from int to long values 
rule PrecisionIntToLong {
	from fieldSepSF : ECORE!EStructuralFeature ( fieldSepSF.name ='precision' and fieldSepSF.eContainingClass.isDataType('MetadataColumn') )
	to newFieldSF : ECORE!EStructuralFeature (
		eType <- thisModule.getLongType()
	)
}
