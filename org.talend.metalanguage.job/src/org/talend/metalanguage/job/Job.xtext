grammar org.talend.metalanguage.job.Job with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.talend.model/model/TalendFile.ecore" as talendFile

import "platform:/resource/org.talend.designer.mapper/model/mapper.ecore" as mapperFile

import "platform:/resource/org.talend.designer.dbmap/model/dbmap.ecore" as dbmapFile

import "http://www.eclipse.org/emf/2003/XMLType" as type

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


ProcessType returns talendFile::ProcessType:
		{talendFile::ProcessType}
		('addParameters' '{' parameters=ParametersType '}')?
		(node+=NodeType)*
		(connection+=ConnectionType)* 
		(note+=NoteType)*
		(context+=ContextType)*
    ;

ParametersType returns talendFile::ParametersType:
		elementParameter+=ElementParameterType ( "," elementParameter+=ElementParameterType)*
    ;

ExternalData returns talendFile::AbstractExternalData:
  MapperData | DBMapperData;
  
DBMapperData returns dbmapFile::DBMapData:
	{dbmapFile::DBMapData}
	'addDBMapData' 
	'{' 
		('addInputTable' '{' InputTables += DBInputTable'}')*
		('addVarTable' '{' VarTables+=DBVarTable '}')*
		('addOutputTable' '{' OutputTables+= DBOutputTable'}')*
	'}'
;

DBInputTable returns dbmapFile::InputTable:
	{dbmapFile::InputTable}
	'NAME:' name=EString
	('MINIMIZED:' minimized=EBoolean)?
	('READONLY:' readonly=EBoolean)?
	('TABLENAME:' tableName=EString)?
	('JOINTYPE:' joinType=EString)?
	('ALIAS:' alias=EString)?
	(DBMapperTableEntries+=DBMapperTableEntry)*
;

DBVarTable returns dbmapFile::VarTable:
	{dbmapFile::VarTable}
	'NAME:' name=EString
	('MINIMIZED:' minimized=EBoolean)?
	('READONLY:' readonly=EBoolean)?
	(DBMapperTableEntries+=DBMapperTableEntry)*
;


DBOutputTable returns dbmapFile::OutputTable:
	{dbmapFile::OutputTable}
	'NAME:' name=EString
	('MINIMIZED:' minimized=EBoolean)?
	('READONLY:' readonly=EBoolean)?
	(DBMapperTableEntries+=DBMapperTableEntry)*
	(FilterEntries+=DBFilterEntry)*
;

DBMapperTableEntry returns dbmapFile::DBMapperTableEntry:
	{dbmapFile::DBMapperTableEntry}
	'addColumn'
	'{'
		'NAME:' name=EString
		(',' 'TYPE:' type=EString)?
		(',' 'NULLABLE:' nullable=EBoolean)?
		(',' 'EXPRESSION:' expression=EString)?
		(',' 'JOIN:' join=EBoolean)?
		(',' 'OPERATOR:' operator=EString)?
	'}'
;

DBFilterEntry returns dbmapFile::FilterEntry:
	'addFilter'
	'{'
		'NAME:' name=EString
		',' 'EXPRESSION:' expression=EString
	'}'
;

MapperData returns mapperFile::MapperData:
	{mapperFile::MapperData}
	'addMapperData' 
	'{' 
		('addUiProperties' '{' uiProperties=UiProperties '}')?
		('addInputTable' '{' inputTables += InputTable'}')*
		('addVarTable' '{' varTables+=VarTable '}')*
		('addOutputTable' '{' outputTables+= OutputTable'}')*
	 '}'
;

UiProperties returns mapperFile::UiProperties:
	{mapperFile::UiProperties}
	'SHELLMAXIMIZED:' shellMaximized=EBoolean
;

InputTable returns mapperFile::InputTable:
	{mapperFile::InputTable}
	'NAME:' name=EString
	('MINIMIZED:' minimized=EBoolean)?
	('SIZESTATE:' sizeState=EString)?
	('EXPRESSIONFILTER:' expressionFilter=EString)?
	('ACTIVATEEXPRESSIONFILTER:' activateExpressionFilter=EBoolean)?
	('ACTIVATECONDENSEDTOOL:' activateCondensedTool=EBoolean)?
	('MATCHINGMODE:' matchingMode=EString)?
	('LOOKUPMODE:' lookupMode=EString)?
	(mapperTableEntries+=MapperTableEntry)*
;

VarTable returns mapperFile::VarTable:
	{mapperFile::VarTable}
	'NAME:' name=EString
	('MINIMIZED:' minimized=EBoolean)?
	('SIZESTATE:' sizeState=EString)?
	(mapperTableEntries+=MapperTableEntry)*
;


OutputTable returns mapperFile::OutputTable:
	{mapperFile::OutputTable}
	'NAME:' name=EString
	('MINIMIZED:' minimized=EBoolean)?
	('SIZESTATE:' sizeState=EString)?
	('EXPRESSIONFILTER:' expressionFilter=EString)?
	('ACTIVATEEXPRESSIONFILTER:' activateExpressionFilter=EBoolean)?
	('ACTIVATECONDENSEDTOOL:' activateCondensedTool=EBoolean)?
	('REJECT:' reject=EBoolean)?
	('REJECTINNERJOIN:' rejectInnerJoin=EBoolean)?
	('ISERRORREJECTTABLE:' isErrorRejectTable=EBoolean)?
	('ISJOINTABLEOF:' isJoinTableOf=EString)?
	(mapperTableEntries+=MapperTableEntry)*
;

MapperTableEntry returns mapperFile::MapperTableEntry:
	{mapperFile::MapperTableEntry}
	'addColumn'
	'{'
		'NAME:' name=EString
		(',' 'TYPE:' type=EString)?
		(',' 'NULLABLE:' nullable=EBoolean)?
		(',' 'EXPRESSION:' expression=EString)?
	'}'
;

NodeType returns talendFile::NodeType:
	'addComponent'
	'{'
		'setComponentDefinition'
		'{'
			('TYPE:' componentName=EString',')
			('NAME:'elementParameter+=UniqueNameType',')
			('POSITION:' (posX=EInt ',' posY=EInt))
    	'}'
    	(metadata+=MetadataType)* 
    	
		'setSettings' 
		'{' 
			(elementParameter+=(SchemaElementParameterType|ElementParameterType))
			( "," elementParameter+=( SchemaElementParameterType| ElementParameterType))*
		'}' 
		
		(metadata+=MetadataType)* 
		(nodeData=ExternalData)?
	'}'
   ;
   
ContextType returns talendFile::ContextType:
	{talendFile::ContextType}
	'ContextType'
	'{'
		('NAME:' name=EString)?
		('CONFIRMATIONNEED:' confirmationNeeded=EBoolean)?
		(contextParameter+=ContextParameterType ( "," contextParameter+=ContextParameterType)*)?
    '}';
    
ContextParameterType returns talendFile::ContextParameterType:
	{talendFile::ContextParameterType}
	'addContextParameter'
	'{'
		('NAME:' name=EString)?
		('TYPE:' type=EString)?
		('VALUE:' value=EString)?
		('COMMENT:' comment=EString)?
		('PROMPT:' prompt=EString)?
		('PROMPTNEEDED:' promptNeeded=EBoolean)?
		('REPOSITORYCONTEXTID:' repositoryContextId=EString)?
    '}';
   
UniqueNameType returns talendFile::ElementParameterType :
  		value=EString
	;

ConnectionType returns talendFile::ConnectionType:
	{talendFile::ConnectionType}
	'addConnection'
	'{'
		('TYPE:' connectorName=EString)
		("," 'NAME:' label=EString)
		("," 'LINESTYLE:' lineStyle=EInt)?
		("," 'MERGEORDER:' mergeOrder=EInt)?
		("," 'METANAME:' metaname=EString)?
		("," 'OUTPUTID:' outputId=EInt)?
		("," 'SOURCE:' source=EString)?
		("," 'TARGET:' target=EString)?
		(( "," elementParameter+=ElementParameterType)*)?
    '}';

NoteType returns talendFile::NoteType:
	'addNote'
	'{'
		('opaque' opaque=EBoolean)?
		('POSITION' '"' posX=EInt','posY=EInt '"')?
		('text' text=EString)?
		elementParameter+=ElementParameterType ( "," elementParameter+=ElementParameterType)*
    '}';

ElementParameterType returns talendFile::ElementParameterType:
	{talendFile::ElementParameterType}
		(name=EString ':'value=EString)
    ;
    
SchemaElementParameterType returns talendFile::ElementParameterType :
	{talendFile::ElementParameterType}
  	(name=EString '{' elementValue+=ElementValueType ( "," elementValue+=ElementValueType)* '}' )?
	;

ElementValueType returns talendFile::ElementValueType:
	{talendFile::ElementValueType}
		('NAME:' elementRef=EString)
		('VALUE:' value=EString)?
		('TYPE:'type=EString)?
    ;

MetadataType returns talendFile::MetadataType:
	{talendFile::MetadataType}
	'addSchema'
	'{'
		('NAME:' name=EString)?
		('TYPE:' connector=EString)?
		('LABEL:' label=EString)?
		('COMMENT:' comment=EString)?
		('SOURCE:' source=EString)?
		(column+=ColumnType)*
    '}';

ColumnType returns talendFile::ColumnType:
	{talendFile::ColumnType}
	'addColumn'
	'{'
		('NAME:' name=EString)
		(',' 'TYPE:' type=EString)?
		(',' 'KEY:' key=EBoolean)?
		(',' 'NULLABLE:' nullable=EBoolean)?
		(',' 'DEFAULTVALUE:' defaultValue=EString)?
		(',' 'LENGTH:' length=EInt)?
		(',' 'COMMENT:' comment=EString)?
		(',' 'ORIGINALDBCOLUMNNAME' originalDbColumnName=EString)?
		(',' 'PATTREN:' pattern=EString)?
		(',' 'PRECISION:' precision=EInt)?
		(',' 'SOURCETYPE:' sourceType=EString)?
    '}';

EString returns ecore::EString:
	STRING | ID | INT;
	
EInt returns ecore::EInt:
	'-'? INT;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';
	

