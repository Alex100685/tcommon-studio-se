##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
#if ($schema.getNamespace())
package $schema.getNamespace();  
#end
@SuppressWarnings("all")
#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
public class ${this.mangle($schema.getName())} extends java.beans.SimpleBeanInfo implements java.io.Serializable {
  /** Default serial version UID. */
  public static final int serialVersionUID = 1;
  private final static Class<${this.mangle($schema.getName()).replace("BeanInfo", "")}> currentClass = ${this.mangle($schema.getName()).replace("BeanInfo", "")}.class;

  public java.beans.PropertyDescriptor[] getPropertyDescriptors() {
    try {
      java.beans.PropertyDescriptor[] list = {
      #foreach ($field in $schema.getFields())
        new java.beans.PropertyDescriptor("$field.name()", currentClass),
      #end
      };
      return list;
    } catch (java.beans.IntrospectionException iexErr) {
      throw new Error(iexErr.toString());
    }
  }

  public java.beans.BeanDescriptor getBeanDescriptor() {
    java.beans.BeanDescriptor desc = new java.beans.BeanDescriptor(currentClass);
    return desc;
  }
}
