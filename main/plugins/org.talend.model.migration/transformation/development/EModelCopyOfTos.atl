-- @atlcompiler atl2006
-- Generated by: $Id$
module EModelCopy;

create OUT : OUTMODEL from IN : INMODEL;

helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

helper context OclAny def : isInElement : Boolean =
	thisModule.inElements->includes(self);

rule "connection::Metadata" {
    from s : INMODEL!"connection::Metadata" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::Metadata" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        connections <- s.connections)
}

rule "connection::Connection" {
    from s : INMODEL!"connection::Connection" (
		if s.oclIsTypeOf(INMODEL!"connection::Connection") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"connection::Connection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::MetadataColumn" {
    from s : INMODEL!"connection::MetadataColumn" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::MetadataColumn" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        sourceType <- s.sourceType,
        defaultValue <- s.defaultValue,
        talendType <- s.talendType,
        key <- s.key,
        nullable <- s.nullable,
        length <- s.length,
        precision <- s.precision,
        originalField <- s.originalField,
        pattern <- s.pattern,
        displayField <- s.displayField)
}

rule "connection::MetadataTable" {
    from s : INMODEL!"connection::MetadataTable" (
		if s.oclIsTypeOf(INMODEL!"connection::MetadataTable") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"connection::MetadataTable" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        sourceName <- s.sourceName,
        tableType <- s.tableType,
        attachedCDC <- s.attachedCDC,
        activatedCDC <- s.activatedCDC,
        columns <- s.columns)
}

rule "connection::DelimitedFileConnection" {
    from s : INMODEL!"connection::DelimitedFileConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::DelimitedFileConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Server <- s.Server,
        FilePath <- s.FilePath,
        Format <- s.Format,
        Encoding <- s.Encoding,
        FieldSeparatorValue <- s.FieldSeparatorValue,
        RowSeparatorType <- s.RowSeparatorType,
        RowSeparatorValue <- s.RowSeparatorValue,
        TextIdentifier <- s.TextIdentifier,
        UseHeader <- s.UseHeader,
        HeaderValue <- s.HeaderValue,
        UseFooter <- s.UseFooter,
        FooterValue <- s.FooterValue,
        UseLimit <- s.UseLimit,
        LimitValue <- s.LimitValue,
        FirstLineCaption <- s.FirstLineCaption,
        RemoveEmptyRow <- s.RemoveEmptyRow,
        EscapeType <- s.EscapeType,
        EscapeChar <- s.EscapeChar,
        TextEnclosure <- s.TextEnclosure,
        CsvOption <- s.CsvOption,
        FieldSeparatorType <- s.FieldSeparatorType,
        splitRecord <- s.splitRecord,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::PositionalFileConnection" {
    from s : INMODEL!"connection::PositionalFileConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::PositionalFileConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Server <- s.Server,
        FilePath <- s.FilePath,
        Format <- s.Format,
        Encoding <- s.Encoding,
        FieldSeparatorValue <- s.FieldSeparatorValue,
        RowSeparatorType <- s.RowSeparatorType,
        RowSeparatorValue <- s.RowSeparatorValue,
        TextIdentifier <- s.TextIdentifier,
        UseHeader <- s.UseHeader,
        HeaderValue <- s.HeaderValue,
        UseFooter <- s.UseFooter,
        FooterValue <- s.FooterValue,
        UseLimit <- s.UseLimit,
        LimitValue <- s.LimitValue,
        FirstLineCaption <- s.FirstLineCaption,
        RemoveEmptyRow <- s.RemoveEmptyRow,
        EscapeType <- s.EscapeType,
        EscapeChar <- s.EscapeChar,
        TextEnclosure <- s.TextEnclosure,
        CsvOption <- s.CsvOption,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::EbcdicConnection" {
    from s : INMODEL!"connection::EbcdicConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::EbcdicConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Server <- s.Server,
        FilePath <- s.FilePath,
        Format <- s.Format,
        Encoding <- s.Encoding,
        FieldSeparatorValue <- s.FieldSeparatorValue,
        RowSeparatorType <- s.RowSeparatorType,
        RowSeparatorValue <- s.RowSeparatorValue,
        TextIdentifier <- s.TextIdentifier,
        UseHeader <- s.UseHeader,
        HeaderValue <- s.HeaderValue,
        UseFooter <- s.UseFooter,
        FooterValue <- s.FooterValue,
        UseLimit <- s.UseLimit,
        LimitValue <- s.LimitValue,
        FirstLineCaption <- s.FirstLineCaption,
        RemoveEmptyRow <- s.RemoveEmptyRow,
        EscapeType <- s.EscapeType,
        EscapeChar <- s.EscapeChar,
        TextEnclosure <- s.TextEnclosure,
        CsvOption <- s.CsvOption,
        MidFile <- s.MidFile,
        DataFile <- s.DataFile,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::MDMConnection" {
    from s : INMODEL!"connection::MDMConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::MDMConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Username <- s.Username,
        Password <- s.Password,
        Port <- s.Port,
        Server <- s.Server,
        Universe <- s.Universe,
        Datamodel <- s.Datamodel,
        Datacluster <- s.Datacluster,
        tables <- s.tables,
        queries <- s.queries,
        schemas <- s.schemas)
}

rule "connection::DatabaseConnection" {
    from s : INMODEL!"connection::DatabaseConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::DatabaseConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        DatabaseType <- s.DatabaseType,
        DriverJarPath <- s.DriverJarPath,
        DriverClass <- s.DriverClass,
        URL <- s.URL,
        dbVersionString <- s.dbVersionString,
        Port <- s.Port,
        Username <- s.Username,
        Password <- s.Password,
        ServerName <- s.ServerName,
        DatasourceName <- s.DatasourceName,
        FileFieldName <- s.FileFieldName,
        Schema <- s.Schema,
        SID <- s.SID,
        SqlSynthax <- s.SqlSynthax,
        StringQuote <- s.StringQuote,
        NullChar <- s.NullChar,
        DbmsId <- s.DbmsId,
        ProductId <- s.ProductId,
        DBRootPath <- s.DBRootPath,
        AdditionalParams <- s.AdditionalParams,
        StandardSQL <- s.StandardSQL,
        SystemSQL <- s.SystemSQL,
        cdcTypeMode <- s.cdcTypeMode,
        SQLMode <- s.SQLMode,
        tables <- s.tables,
        queries <- s.queries,
        cdcConns <- s.cdcConns)
}

rule "connection::SAPConnection" {
    from s : INMODEL!"connection::SAPConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SAPConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Host <- s.Host,
        Username <- s.Username,
        Password <- s.Password,
        Client <- s.Client,
        SystemNumber <- s.SystemNumber,
        Language <- s.Language,
        currentFucntion <- s.currentFucntion,
        tables <- s.tables,
        queries <- s.queries,
        Funtions <- s.Funtions)
}

rule "connection::SAPFunctionUnit" {
    from s : INMODEL!"connection::SAPFunctionUnit" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SAPFunctionUnit" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        Name <- s.Name,
        OutputType <- s.OutputType,
        OutputTableName <- s.OutputTableName,
        Document <- s.Document,
        InputParameterTable <- s.InputParameterTable,
        OutputParameterTable <- s.OutputParameterTable,
        MetadataTable <- s.MetadataTable,
        tables <- s.tables,
        TestInputParameterTable <- s.TestInputParameterTable)
}

rule "connection::SAPFunctionParameterColumn" {
    from s : INMODEL!"connection::SAPFunctionParameterColumn" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SAPFunctionParameterColumn" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        Name <- s.Name,
        ParameterType <- s.ParameterType,
        StructureOrTableName <- s.StructureOrTableName,
        DataType <- s.DataType,
        Length <- s.Length,
        Description <- s.Description,
        Value <- s.Value)
}

rule "connection::SAPFunctionParameterTable" {
    from s : INMODEL!"connection::SAPFunctionParameterTable" (
		if s.oclIsTypeOf(INMODEL!"connection::SAPFunctionParameterTable") then
			thisModule.inElements->includes(s)
		else false endif)
    to t : OUTMODEL!"connection::SAPFunctionParameterTable" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        columns <- s.columns)
}

rule "connection::InputSAPFunctionParameterTable" {
    from s : INMODEL!"connection::InputSAPFunctionParameterTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::InputSAPFunctionParameterTable" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        columns <- s.columns)
}

rule "connection::OutputSAPFunctionParameterTable" {
    from s : INMODEL!"connection::OutputSAPFunctionParameterTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::OutputSAPFunctionParameterTable" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        columns <- s.columns)
}

rule "connection::RegexpFileConnection" {
    from s : INMODEL!"connection::RegexpFileConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::RegexpFileConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Server <- s.Server,
        FilePath <- s.FilePath,
        Format <- s.Format,
        Encoding <- s.Encoding,
        FieldSeparatorValue <- s.FieldSeparatorValue,
        RowSeparatorType <- s.RowSeparatorType,
        RowSeparatorValue <- s.RowSeparatorValue,
        TextIdentifier <- s.TextIdentifier,
        UseHeader <- s.UseHeader,
        HeaderValue <- s.HeaderValue,
        UseFooter <- s.UseFooter,
        FooterValue <- s.FooterValue,
        UseLimit <- s.UseLimit,
        LimitValue <- s.LimitValue,
        FirstLineCaption <- s.FirstLineCaption,
        RemoveEmptyRow <- s.RemoveEmptyRow,
        EscapeType <- s.EscapeType,
        EscapeChar <- s.EscapeChar,
        TextEnclosure <- s.TextEnclosure,
        CsvOption <- s.CsvOption,
        FieldSeparatorType <- s.FieldSeparatorType,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::XmlFileConnection" {
    from s : INMODEL!"connection::XmlFileConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::XmlFileConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        XsdFilePath <- s.XsdFilePath,
        XmlFilePath <- s.XmlFilePath,
        Guess <- s.Guess,
        MaskXPattern <- s.MaskXPattern,
        Encoding <- s.Encoding,
        tables <- s.tables,
        queries <- s.queries,
        schema <- s.schema)
}

rule "connection::SchemaTarget" {
    from s : INMODEL!"connection::SchemaTarget" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SchemaTarget" (
        __xmiID__ <- s.__xmiID__,
        RelativeXPathQuery <- s.RelativeXPathQuery,
        TagName <- s.TagName)
}

rule "connection::QueriesConnection" {
    from s : INMODEL!"connection::QueriesConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::QueriesConnection" (
        __xmiID__ <- s.__xmiID__,
        "query" <- s."query")
}

rule "connection::Query" {
    from s : INMODEL!"connection::Query" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::Query" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        value <- s.value,
        contextMode <- s.contextMode)
}

rule "connection::LdifFileConnection" {
    from s : INMODEL!"connection::LdifFileConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::LdifFileConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        value <- s.value,
        FilePath <- s.FilePath,
        LimitEntry <- s.LimitEntry,
        UseLimit <- s.UseLimit,
        Server <- s.Server,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::FileExcelConnection" {
    from s : INMODEL!"connection::FileExcelConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::FileExcelConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Server <- s.Server,
        FilePath <- s.FilePath,
        Format <- s.Format,
        Encoding <- s.Encoding,
        FieldSeparatorValue <- s.FieldSeparatorValue,
        RowSeparatorType <- s.RowSeparatorType,
        RowSeparatorValue <- s.RowSeparatorValue,
        TextIdentifier <- s.TextIdentifier,
        UseHeader <- s.UseHeader,
        HeaderValue <- s.HeaderValue,
        UseFooter <- s.UseFooter,
        FooterValue <- s.FooterValue,
        UseLimit <- s.UseLimit,
        LimitValue <- s.LimitValue,
        FirstLineCaption <- s.FirstLineCaption,
        RemoveEmptyRow <- s.RemoveEmptyRow,
        EscapeType <- s.EscapeType,
        EscapeChar <- s.EscapeChar,
        TextEnclosure <- s.TextEnclosure,
        CsvOption <- s.CsvOption,
        SheetName <- s.SheetName,
        sheetColumns <- s.sheetColumns,
        firstColumn <- s.firstColumn,
        lastColumn <- s.lastColumn,
        thousandSeparator <- s.thousandSeparator,
        decimalSeparator <- s.decimalSeparator,
        advancedSpearator <- s.advancedSpearator,
        selectAllSheets <- s.selectAllSheets,
        sheetList <- s.sheetList,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::XmlXPathLoopDescriptor" {
    from s : INMODEL!"connection::XmlXPathLoopDescriptor" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::XmlXPathLoopDescriptor" (
        __xmiID__ <- s.__xmiID__,
        LimitBoucle <- s.LimitBoucle,
        AbsoluteXPathQuery <- s.AbsoluteXPathQuery,
        schemaTargets <- s.schemaTargets)
}

rule "connection::GenericSchemaConnection" {
    from s : INMODEL!"connection::GenericSchemaConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::GenericSchemaConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        mappingTypeUsed <- s.mappingTypeUsed,
        mappingTypeId <- s.mappingTypeId,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::LDAPSchemaConnection" {
    from s : INMODEL!"connection::LDAPSchemaConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::LDAPSchemaConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Host <- s.Host,
        Port <- s.Port,
        Protocol <- s.Protocol,
        Filter <- s.Filter,
        Separator <- s.Separator,
        UseAdvanced <- s.UseAdvanced,
        StorePath <- s.StorePath,
        UseLimit <- s.UseLimit,
        UseAuthen <- s.UseAuthen,
        BindPrincipal <- s.BindPrincipal,
        BindPassword <- s.BindPassword,
        LimitValue <- s.LimitValue,
        EncryptionMethodName <- s.EncryptionMethodName,
        Value <- s.Value,
        SavePassword <- s.SavePassword,
        Aliases <- s.Aliases,
        Referrals <- s.Referrals,
        CountLimit <- s.CountLimit,
        TimeOutLimit <- s.TimeOutLimit,
        BaseDNs <- s.BaseDNs,
        GetBaseDNsFromRoot <- s.GetBaseDNsFromRoot,
        ReturnAttributes <- s.ReturnAttributes,
        SelectedDN <- s.SelectedDN,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::WSDLSchemaConnection" {
    from s : INMODEL!"connection::WSDLSchemaConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::WSDLSchemaConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        WSDL <- s.WSDL,
        needAuth <- s.needAuth,
        methodName <- s.methodName,
        parameters <- s.parameters,
        UserName <- s.UserName,
        Password <- s.Password,
        useProxy <- s.useProxy,
        proxyHost <- s.proxyHost,
        proxyPort <- s.proxyPort,
        proxyUser <- s.proxyUser,
        proxyPassword <- s.proxyPassword,
        Value <- s.Value,
        EndpointURI <- s.EndpointURI,
        Encoding <- s.Encoding,
        timeOut <- s.timeOut,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::SalesforceSchemaConnection" {
    from s : INMODEL!"connection::SalesforceSchemaConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SalesforceSchemaConnection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        webServiceUrl <- s.webServiceUrl,
        userName <- s.userName,
        password <- s.password,
        moduleName <- s.moduleName,
        queryCondition <- s.queryCondition,
        useCustomModuleName <- s.useCustomModuleName,
        useProxy <- s.useProxy,
        proxyHost <- s.proxyHost,
        proxyPort <- s.proxyPort,
        proxyUsername <- s.proxyUsername,
        proxyPassword <- s.proxyPassword,
        batchSize <- s.batchSize,
        useHttpProxy <- s.useHttpProxy,
        useAlphbet <- s.useAlphbet,
        timeOut <- s.timeOut,
        tables <- s.tables,
        queries <- s.queries)
}

rule "connection::CDCConnection" {
    from s : INMODEL!"connection::CDCConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::CDCConnection" (
        __xmiID__ <- s.__xmiID__,
        cdcTypes <- s.cdcTypes)
}

rule "connection::CDCType" {
    from s : INMODEL!"connection::CDCType" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::CDCType" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        linkDB <- s.linkDB,
        journalName <- s.journalName,
        subscribers <- s.subscribers,
        cdcConnection <- s.cdcConnection)
}

rule "connection::SubscriberTable" {
    from s : INMODEL!"connection::SubscriberTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SubscriberTable" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        sourceName <- s.sourceName,
        tableType <- s.tableType,
        attachedCDC <- s.attachedCDC,
        activatedCDC <- s.activatedCDC,
        system <- s.system,
        columns <- s.columns)
}

rule "connection::SAPTestInputParameterTable" {
    from s : INMODEL!"connection::SAPTestInputParameterTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::SAPTestInputParameterTable" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        columns <- s.columns)
}

rule "connection::Concept" {
    from s : INMODEL!"connection::Concept" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::Concept" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        sourceName <- s.sourceName,
        tableType <- s.tableType,
        attachedCDC <- s.attachedCDC,
        activatedCDC <- s.activatedCDC,
        LoopExpression <- s.LoopExpression,
        LoopLimit <- s.LoopLimit,
        columns <- s.columns,
        conceptTargets <- s.conceptTargets)
}

rule "connection::ConceptTarget" {
    from s : INMODEL!"connection::ConceptTarget" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::ConceptTarget" (
        __xmiID__ <- s.__xmiID__,
        targetName <- s.targetName,
        RelativeLoopExpression <- s.RelativeLoopExpression)
}

rule "connection::HL7Connection" {
    from s : INMODEL!"connection::HL7Connection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"connection::HL7Connection" (
        __xmiID__ <- s.__xmiID__,
        properties <- s.properties,
        id <- s.id,
        comment <- s.comment,
        label <- s.label,
        readOnly <- s.readOnly,
        synchronised <- s.synchronised,
        divergency <- s.divergency,
        version <- s.version,
        ContextMode <- s.ContextMode,
        ContextId <- s.ContextId,
        Server <- s.Server,
        FilePath <- s.FilePath,
        Format <- s.Format,
        Encoding <- s.Encoding,
        FieldSeparatorValue <- s.FieldSeparatorValue,
        RowSeparatorType <- s.RowSeparatorType,
        RowSeparatorValue <- s.RowSeparatorValue,
        TextIdentifier <- s.TextIdentifier,
        UseHeader <- s.UseHeader,
        HeaderValue <- s.HeaderValue,
        UseFooter <- s.UseFooter,
        FooterValue <- s.FooterValue,
        UseLimit <- s.UseLimit,
        LimitValue <- s.LimitValue,
        FirstLineCaption <- s.FirstLineCaption,
        RemoveEmptyRow <- s.RemoveEmptyRow,
        EscapeType <- s.EscapeType,
        EscapeChar <- s.EscapeChar,
        TextEnclosure <- s.TextEnclosure,
        CsvOption <- s.CsvOption,
        StartChar <- s.StartChar,
        EndChar <- s.EndChar,
        tables <- s.tables,
        queries <- s.queries)
}

