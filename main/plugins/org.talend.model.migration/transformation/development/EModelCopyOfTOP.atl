-- @atlcompiler atl2006
-- Generated by: $Id$
module EModelCopy;

create OUT : OUTMODEL from IN : INMODEL;

helper def : inElements : Set(INMODEL!"ecore::EObject") = INMODEL!"ecore::EObject".allInstancesFrom('IN');

helper context OclAny def : isInElement : Boolean =
	thisModule.inElements->includes(self);

rule "cwm::relational::TdTable" {
    from s : INMODEL!"cwm::relational::TdTable" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::relational::TdTable" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isTemporary <- s.isTemporary,
        temporaryScope <- s.temporaryScope,
        isSystem <- s.isSystem,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        usingTrigger <- s.usingTrigger,
        type <- s.type,
        optionScopeColumn <- s.optionScopeColumn,
        trigger <- s.trigger)
}

rule "cwm::relational::TdView" {
    from s : INMODEL!"cwm::relational::TdView" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::relational::TdView" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isReadOnly <- s.isReadOnly,
        checkOption <- s.checkOption,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        index <- s.index,
        usingTrigger <- s.usingTrigger,
        type <- s.type,
        optionScopeColumn <- s.optionScopeColumn,
        queryExpression <- s.queryExpression)
}

rule "cwm::relational::TdCatalog" {
    from s : INMODEL!"cwm::relational::TdCatalog" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::relational::TdCatalog" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        defaultCharacterSetName <- s.defaultCharacterSetName,
        defaultCollationName <- s.defaultCollationName,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "cwm::relational::TdSchema" {
    from s : INMODEL!"cwm::relational::TdSchema" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::relational::TdSchema" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

rule "cwm::relational::TdColumn" {
    from s : INMODEL!"cwm::relational::TdColumn" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::relational::TdColumn" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        changeability <- s.changeability,
        ordering <- s.ordering,
        targetScope <- s.targetScope,
        precision <- s.precision,
        scale <- s.scale,
        isNullable <- s.isNullable,
        length <- s.length,
        collationName <- s.collationName,
        characterSetName <- s.characterSetName,
        javaType <- s.javaType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        multiplicity <- s.multiplicity,
        type <- s.type,
        slot <- s.slot,
        discriminatedUnion <- s.discriminatedUnion,
        indexedFeature <- s.indexedFeature,
        keyRelationship <- s.keyRelationship,
        uniqueKey <- s.uniqueKey,
        dataItem <- s.dataItem,
        remap <- s.remap,
        initialValue <- s.initialValue,
        referencedTableType <- s.referencedTableType,
        optionScopeColumnSet <- s.optionScopeColumnSet,
        sqlDataType <- s.sqlDataType)
}

rule "cwm::relational::TdSqlDataType" {
    from s : INMODEL!"cwm::relational::TdSqlDataType" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::relational::TdSqlDataType" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        typeNumber <- s.typeNumber,
        characterMaximumLength <- s.characterMaximumLength,
        characterOctetLength <- s.characterOctetLength,
        numericPrecision <- s.numericPrecision,
        numericPrecisionRadix <- s.numericPrecisionRadix,
        numericScale <- s.numericScale,
        dateTimePrecision <- s.dateTimePrecision,
        javaDataType <- s.javaDataType,
        nullable <- s.nullable,
        unsignedAttribute <- s.unsignedAttribute,
        caseSensitive <- s.caseSensitive,
        autoIncrement <- s.autoIncrement,
        localTypeName <- s.localTypeName,
        searchable <- s.searchable,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        sqlDistinctType <- s.sqlDistinctType)
}

rule "cwm::relational::TdTrigger" {
    from s : INMODEL!"cwm::relational::TdTrigger" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::relational::TdTrigger" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        eventManipulation <- s.eventManipulation,
        actionOrientation <- s.actionOrientation,
        conditionTiming <- s.conditionTiming,
        conditionReferenceNewTable <- s.conditionReferenceNewTable,
        conditionReferenceOldTable <- s.conditionReferenceOldTable,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        actionCondition <- s.actionCondition,
        actionStatement <- s.actionStatement,
        usedColumnSet <- s.usedColumnSet,
        table <- s.table)
}

rule "cwm::relational::TdProcedure" {
    from s : INMODEL!"cwm::relational::TdProcedure" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::relational::TdProcedure" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        isQuery <- s.isQuery,
        type <- s.type,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        featureNode <- s.featureNode,
        featureMap <- s.featureMap,
        cfMap <- s.cfMap,
        parameter <- s.parameter,
        body <- s.body,
        specification <- s.specification)
}

rule "cwm::softwaredeployment::TdProviderConnection" {
    from s : INMODEL!"cwm::softwaredeployment::TdProviderConnection" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::softwaredeployment::TdProviderConnection" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isReadOnly <- s.isReadOnly,
        login <- s.login,
        password <- s.password,
        connectionString <- s.connectionString,
        driverClassName <- s.driverClassName,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        dataManager <- s.dataManager)
}

rule "cwm::softwaredeployment::TdDataManager" {
    from s : INMODEL!"cwm::softwaredeployment::TdDataManager" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::softwaredeployment::TdDataManager" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        pathname <- s.pathname,
        isCaseSensitive <- s.isCaseSensitive,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployedSoftwareSystem <- s.deployedSoftwareSystem,
        component <- s.component,
        clientConnection <- s.clientConnection,
        dataPackage <- s.dataPackage)
}

rule "cwm::softwaredeployment::TdDataProvider" {
    from s : INMODEL!"cwm::softwaredeployment::TdDataProvider" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::softwaredeployment::TdDataProvider" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        pathname <- s.pathname,
        isCaseSensitive <- s.isCaseSensitive,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployedSoftwareSystem <- s.deployedSoftwareSystem,
        component <- s.component,
        clientConnection <- s.clientConnection,
        dataPackage <- s.dataPackage,
        resourceConnection <- s.resourceConnection)
}

rule "cwm::softwaredeployment::TdSoftwareSystem" {
    from s : INMODEL!"cwm::softwaredeployment::TdSoftwareSystem" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::softwaredeployment::TdSoftwareSystem" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        type <- s.type,
        subtype <- s.subtype,
        supplier <- s.supplier,
        version <- s.version,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        feature <- s.feature,
        structuralFeature <- s.structuralFeature,
        parameter <- s.parameter,
        generalization <- s.generalization,
        specialization <- s.specialization,
        instance <- s.instance,
        alias <- s.alias,
        expressionNode <- s.expressionNode,
        mappingFrom <- s.mappingFrom,
        mappingTo <- s.mappingTo,
        classifierMap <- s.classifierMap,
        cfMap <- s.cfMap,
        domain <- s.domain,
        simpleDimension <- s.simpleDimension,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager,
        deployment <- s.deployment,
        typespace <- s.typespace)
}

rule "cwm::softwaredeployment::TdMachine" {
    from s : INMODEL!"cwm::softwaredeployment::TdMachine" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::softwaredeployment::TdMachine" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        ipAddress <- s.ipAddress,
        hostName <- s.hostName,
        machineID <- s.machineID,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        deployedComponent <- s.deployedComponent,
        site <- s.site)
}

rule "cwm::xml::TdXMLElement" {
    from s : INMODEL!"cwm::xml::TdXMLElement" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::xml::TdXMLElement" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        javaType <- s.javaType,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        valueSlot <- s.valueSlot,
        classifier <- s.classifier,
        slot <- s.slot,
        xsdElementDeclaration <- s.xsdElementDeclaration,
        ownedDocument <- s.ownedDocument,
        xmlContent <- s.xmlContent)
}

rule "cwm::xml::TdXMLContent" {
    from s : INMODEL!"cwm::xml::TdXMLContent" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::xml::TdXMLContent" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        type <- s.type,
        occurrence <- s.occurrence,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        elementType <- s.elementType,
        ownedElementType <- s.ownedElementType,
        xmlElements <- s.xmlElements)
}

rule "cwm::xml::TdXMLDocument" {
    from s : INMODEL!"cwm::xml::TdXMLDocument" (thisModule.inElements->includes(s))
    to t : OUTMODEL!"cwm::xml::TdXMLDocument" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        xsdFilePath <- s.xsdFilePath,
        clientDependency <- s.clientDependency,
        supplierDependency <- s.supplierDependency,
        constraint <- s.constraint,
        importer <- s.importer,
        stereotype <- s.stereotype,
        taggedValue <- s.taggedValue,
        document <- s.document,
        description <- s.description,
        responsibleParty <- s.responsibleParty,
        elementNode <- s.elementNode,
        set <- s.set,
        renderedObject <- s.renderedObject,
        vocabularyElement <- s.vocabularyElement,
        measurement <- s.measurement,
        changeRequest <- s.changeRequest,
        dasdlProperty <- s.dasdlProperty,
        ownedElement <- s.ownedElement,
        importedElement <- s.importedElement,
        dataManager <- s.dataManager)
}

